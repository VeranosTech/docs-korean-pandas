# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../development/contributing_docstring.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../development/contributing_docstring.rst:7
msgid "pandas docstring guide"
msgstr ""

#: ../../development/contributing_docstring.rst:10
msgid "About docstrings and standards"
msgstr ""

#: ../../development/contributing_docstring.rst:12
msgid ""
"A Python docstring is a string used to document a Python module, class, "
"function or method, so programmers can understand what it does without "
"having to read the details of the implementation."
msgstr ""

#: ../../development/contributing_docstring.rst:16
msgid ""
"Also, it is a common practice to generate online (html) documentation "
"automatically from docstrings. `Sphinx <https://www.sphinx-doc.org>`_ "
"serves this purpose."
msgstr ""

#: ../../development/contributing_docstring.rst:20
msgid "Next example gives an idea on how a docstring looks like:"
msgstr ""

#: ../../development/contributing_docstring.rst:59
msgid ""
"Some standards exist about docstrings, so they are easier to read, and "
"they can be exported to other formats such as html or pdf."
msgstr ""

#: ../../development/contributing_docstring.rst:62
msgid ""
"The first conventions every Python docstring should follow are defined in"
" `PEP-257 <https://www.python.org/dev/peps/pep-0257/>`_."
msgstr ""

#: ../../development/contributing_docstring.rst:65
msgid ""
"As PEP-257 is quite open, and some other standards exist on top of it. In"
" the case of pandas, the numpy docstring convention is followed. The "
"conventions is explained in this document:"
msgstr ""

#: ../../development/contributing_docstring.rst:69
msgid ""
"`numpydoc docstring guide "
"<https://numpydoc.readthedocs.io/en/latest/format.html>`_ (which is based"
" in the original `Guide to NumPy/SciPy documentation "
"<https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_)"
msgstr ""

#: ../../development/contributing_docstring.rst:73
msgid "numpydoc is a Sphinx extension to support the numpy docstring convention."
msgstr ""

#: ../../development/contributing_docstring.rst:75
msgid ""
"The standard uses reStructuredText (reST). reStructuredText is a markup "
"language that allows encoding styles in plain text files. Documentation "
"about reStructuredText can be found in:"
msgstr ""

#: ../../development/contributing_docstring.rst:79
msgid ""
"`Sphinx reStructuredText primer <https://www.sphinx-"
"doc.org/en/stable/rest.html>`_"
msgstr ""

#: ../../development/contributing_docstring.rst:80
msgid ""
"`Quick reStructuredText reference "
"<http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_"
msgstr ""

#: ../../development/contributing_docstring.rst:81
msgid ""
"`Full reStructuredText specification "
"<http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html>`_"
msgstr ""

#: ../../development/contributing_docstring.rst:83
msgid ""
"Pandas has some helpers for sharing docstrings between related classes, "
"see :ref:`docstring.sharing`."
msgstr ""

#: ../../development/contributing_docstring.rst:86
msgid ""
"The rest of this document will summarize all the above guides, and will "
"provide additional convention specific to the pandas project."
msgstr ""

#: ../../development/contributing_docstring.rst:92
msgid "Writing a docstring"
msgstr ""

#: ../../development/contributing_docstring.rst:97
msgid "General rules"
msgstr ""

#: ../../development/contributing_docstring.rst:99
msgid ""
"Docstrings must be defined with three double-quotes. No blank lines "
"should be left before or after the docstring. The text starts in the next"
" line after the opening quotes. The closing quotes have their own line "
"(meaning that they are not at the end of the last sentence)."
msgstr ""

#: ../../development/contributing_docstring.rst:104
msgid ""
"In rare occasions reST styles like bold text or italics will be used in "
"docstrings, but is it common to have inline code, which is presented "
"between backticks. It is considered inline code:"
msgstr ""

#: ../../development/contributing_docstring.rst:108
msgid "The name of a parameter"
msgstr ""

#: ../../development/contributing_docstring.rst:109
msgid ""
"Python code, a module, function, built-in, type, literal... (e.g. ``os``,"
" ``list``, ``numpy.abs``, ``datetime.date``, ``True``)"
msgstr ""

#: ../../development/contributing_docstring.rst:111
msgid "A pandas class (in the form ``:class:`pandas.Series```)"
msgstr ""

#: ../../development/contributing_docstring.rst:112
msgid "A pandas method (in the form ``:meth:`pandas.Series.sum```)"
msgstr ""

#: ../../development/contributing_docstring.rst:113
msgid "A pandas function (in the form ``:func:`pandas.to_datetime```)"
msgstr ""

#: ../../development/contributing_docstring.rst:116
msgid ""
"To display only the last component of the linked class, method or "
"function, prefix it with ``~``. For example, ``:class:`~pandas.Series``` "
"will link to ``pandas.Series`` but only display the last part, ``Series``"
" as the link text. See `Sphinx cross-referencing syntax <https://www"
".sphinx-doc.org/en/stable/domains.html#cross-referencing-syntax>`_ for "
"details."
msgstr ""

#: ../../development/contributing_docstring.rst:123
#: ../../development/contributing_docstring.rst:174
#: ../../development/contributing_docstring.rst:297
#: ../../development/contributing_docstring.rst:724
msgid "**Good:**"
msgstr ""

#: ../../development/contributing_docstring.rst:137
#: ../../development/contributing_docstring.rst:186
#: ../../development/contributing_docstring.rst:321
#: ../../development/contributing_docstring.rst:814
msgid "**Bad:**"
msgstr ""

#: ../../development/contributing_docstring.rst:164
msgid "Section 1: Short summary"
msgstr ""

#: ../../development/contributing_docstring.rst:166
msgid ""
"The short summary is a single sentence that expresses what the function "
"does in a concise way."
msgstr ""

#: ../../development/contributing_docstring.rst:169
msgid ""
"The short summary must start with a capital letter, end with a dot, and "
"fit in a single line. It needs to express what the object does without "
"providing details. For functions and methods, the short summary must "
"start with an infinitive verb."
msgstr ""

#: ../../development/contributing_docstring.rst:232
msgid "Section 2: Extended summary"
msgstr ""

#: ../../development/contributing_docstring.rst:234
msgid ""
"The extended summary provides details on what the function does. It "
"should not go into the details of the parameters, or discuss "
"implementation notes, which go in other sections."
msgstr ""

#: ../../development/contributing_docstring.rst:238
msgid ""
"A blank line is left between the short summary and the extended summary. "
"And every paragraph in the extended summary is finished by a dot."
msgstr ""

#: ../../development/contributing_docstring.rst:241
msgid ""
"The extended summary should provide details on why the function is useful"
" and their use cases, if it is not too generic."
msgstr ""

#: ../../development/contributing_docstring.rst:263
msgid "Section 3: Parameters"
msgstr ""

#: ../../development/contributing_docstring.rst:265
msgid ""
"The details of the parameters will be added in this section. This section"
" has the title \"Parameters\", followed by a line with a hyphen under "
"each letter of the word \"Parameters\". A blank line is left before the "
"section title, but not after, and not between the line with the word "
"\"Parameters\" and the one with the hyphens."
msgstr ""

#: ../../development/contributing_docstring.rst:271
msgid ""
"After the title, each parameter in the signature must be documented, "
"including `*args` and `**kwargs`, but not `self`."
msgstr ""

#: ../../development/contributing_docstring.rst:274
msgid ""
"The parameters are defined by their name, followed by a space, a colon, "
"another space, and the type (or types). Note that the space between the "
"name and the colon is important. Types are not defined for `*args` and "
"`**kwargs`, but must be defined for all other parameters. After the "
"parameter definition, it is required to have a line with the parameter "
"description, which is indented, and can have multiple lines. The "
"description must start with a capital letter, and finish with a dot."
msgstr ""

#: ../../development/contributing_docstring.rst:282
msgid ""
"For keyword arguments with a default value, the default will be listed "
"after a comma at the end of the type. The exact form of the type in this "
"case will be \"int, default 0\". In some cases it may be useful to "
"explain what the default argument means, which can be added after a comma"
" \"int, default -1, meaning all cpus\"."
msgstr ""

#: ../../development/contributing_docstring.rst:288
msgid ""
"In cases where the default value is `None`, meaning that the value will "
"not be used. Instead of \"str, default None\", it is preferred to write "
"\"str, optional\". When `None` is a value being used, we will keep the "
"form \"str, default None\". For example, in "
"`df.to_csv(compression=None)`, `None` is not a value being used, but "
"means that compression is optional, and no compression is being used if "
"not provided. In this case we will use `str, optional`. Only in cases "
"like `func(value=None)` and `None` is being used in the same way as `0` "
"or `foo` would be used, then we will specify \"str, int or None, default "
"None\"."
msgstr ""

#: ../../development/contributing_docstring.rst:353
msgid "Parameter types"
msgstr ""

#: ../../development/contributing_docstring.rst:355
msgid ""
"When specifying the parameter types, Python built-in data types can be "
"used directly (the Python type is preferred to the more verbose string, "
"integer, boolean, etc):"
msgstr ""

#: ../../development/contributing_docstring.rst:359
msgid "int"
msgstr ""

#: ../../development/contributing_docstring.rst:360
msgid "float"
msgstr ""

#: ../../development/contributing_docstring.rst:361
msgid "str"
msgstr ""

#: ../../development/contributing_docstring.rst:362
msgid "bool"
msgstr ""

#: ../../development/contributing_docstring.rst:364
msgid ""
"For complex types, define the subtypes. For `dict` and `tuple`, as more "
"than one type is present, we use the brackets to help read the type "
"(curly brackets for `dict` and normal brackets for `tuple`):"
msgstr ""

#: ../../development/contributing_docstring.rst:368
msgid "list of int"
msgstr ""

#: ../../development/contributing_docstring.rst:369
msgid "dict of {str : int}"
msgstr ""

#: ../../development/contributing_docstring.rst:370
msgid "tuple of (str, int, int)"
msgstr ""

#: ../../development/contributing_docstring.rst:371
msgid "tuple of (str,)"
msgstr ""

#: ../../development/contributing_docstring.rst:372
msgid "set of str"
msgstr ""

#: ../../development/contributing_docstring.rst:374
msgid ""
"In case where there are just a set of values allowed, list them in curly "
"brackets and separated by commas (followed by a space). If the values are"
" ordinal and they have an order, list them in this order. Otherwise, list"
" the default value first, if there is one:"
msgstr ""

#: ../../development/contributing_docstring.rst:379
msgid "{0, 10, 25}"
msgstr ""

#: ../../development/contributing_docstring.rst:380
msgid "{'simple', 'advanced'}"
msgstr ""

#: ../../development/contributing_docstring.rst:381
msgid "{'low', 'medium', 'high'}"
msgstr ""

#: ../../development/contributing_docstring.rst:382
msgid "{'cat', 'dog', 'bird'}"
msgstr ""

#: ../../development/contributing_docstring.rst:384
msgid "If the type is defined in a Python module, the module must be specified:"
msgstr ""

#: ../../development/contributing_docstring.rst:386
msgid "datetime.date"
msgstr ""

#: ../../development/contributing_docstring.rst:387
msgid "datetime.datetime"
msgstr ""

#: ../../development/contributing_docstring.rst:388
msgid "decimal.Decimal"
msgstr ""

#: ../../development/contributing_docstring.rst:390
msgid "If the type is in a package, the module must be also specified:"
msgstr ""

#: ../../development/contributing_docstring.rst:392
msgid "numpy.ndarray"
msgstr ""

#: ../../development/contributing_docstring.rst:393
msgid "scipy.sparse.coo_matrix"
msgstr ""

#: ../../development/contributing_docstring.rst:395
msgid ""
"If the type is a pandas type, also specify pandas except for Series and "
"DataFrame:"
msgstr ""

#: ../../development/contributing_docstring.rst:398
msgid "Series"
msgstr ""

#: ../../development/contributing_docstring.rst:399
msgid "DataFrame"
msgstr ""

#: ../../development/contributing_docstring.rst:400
msgid "pandas.Index"
msgstr ""

#: ../../development/contributing_docstring.rst:401
msgid "pandas.Categorical"
msgstr ""

#: ../../development/contributing_docstring.rst:402
msgid "pandas.SparseArray"
msgstr ""

#: ../../development/contributing_docstring.rst:404
msgid ""
"If the exact type is not relevant, but must be compatible with a numpy "
"array, array-like can be specified. If Any type that can be iterated is "
"accepted, iterable can be used:"
msgstr ""

#: ../../development/contributing_docstring.rst:408
msgid "array-like"
msgstr ""

#: ../../development/contributing_docstring.rst:409
msgid "iterable"
msgstr ""

#: ../../development/contributing_docstring.rst:411
msgid ""
"If more than one type is accepted, separate them by commas, except the "
"last two types, that need to be separated by the word 'or':"
msgstr ""

#: ../../development/contributing_docstring.rst:414
msgid "int or float"
msgstr ""

#: ../../development/contributing_docstring.rst:415
msgid "float, decimal.Decimal or None"
msgstr ""

#: ../../development/contributing_docstring.rst:416
msgid "str or list of str"
msgstr ""

#: ../../development/contributing_docstring.rst:418
msgid ""
"If ``None`` is one of the accepted values, it always needs to be the last"
" in the list."
msgstr ""

#: ../../development/contributing_docstring.rst:421
msgid "For axis, the convention is to use something like:"
msgstr ""

#: ../../development/contributing_docstring.rst:423
msgid "axis : {0 or 'index', 1 or 'columns', None}, default None"
msgstr ""

#: ../../development/contributing_docstring.rst:428
msgid "Section 4: Returns or Yields"
msgstr ""

#: ../../development/contributing_docstring.rst:430
msgid ""
"If the method returns a value, it will be documented in this section. "
"Also if the method yields its output."
msgstr ""

#: ../../development/contributing_docstring.rst:433
msgid ""
"The title of the section will be defined in the same way as the "
"\"Parameters\". With the names \"Returns\" or \"Yields\" followed by a "
"line with as many hyphens as the letters in the preceding word."
msgstr ""

#: ../../development/contributing_docstring.rst:437
msgid ""
"The documentation of the return is also similar to the parameters. But in"
" this case, no name will be provided, unless the method returns or yields"
" more than one value (a tuple of values)."
msgstr ""

#: ../../development/contributing_docstring.rst:441
msgid ""
"The types for \"Returns\" and \"Yields\" are the same as the ones for the"
" \"Parameters\". Also, the description must finish with a dot."
msgstr ""

#: ../../development/contributing_docstring.rst:444
msgid "For example, with a single value:"
msgstr ""

#: ../../development/contributing_docstring.rst:462
msgid "With more than one value:"
msgstr ""

#: ../../development/contributing_docstring.rst:487
msgid "If the method yields its value:"
msgstr ""

#: ../../development/contributing_docstring.rst:509
msgid "Section 5: See Also"
msgstr ""

#: ../../development/contributing_docstring.rst:511
msgid ""
"This section is used to let users know about pandas functionality related"
" to the one being documented. In rare cases, if no related methods or "
"functions can be found at all, this section can be skipped."
msgstr ""

#: ../../development/contributing_docstring.rst:515
msgid ""
"An obvious example would be the `head()` and `tail()` methods. As "
"`tail()` does the equivalent as `head()` but at the end of the `Series` "
"or `DataFrame` instead of at the beginning, it is good to let the users "
"know about it."
msgstr ""

#: ../../development/contributing_docstring.rst:519
msgid ""
"To give an intuition on what can be considered related, here there are "
"some examples:"
msgstr ""

#: ../../development/contributing_docstring.rst:522
msgid ""
"``loc`` and ``iloc``, as they do the same, but in one case providing "
"indices and in the other positions"
msgstr ""

#: ../../development/contributing_docstring.rst:524
msgid "``max`` and ``min``, as they do the opposite"
msgstr ""

#: ../../development/contributing_docstring.rst:525
msgid ""
"``iterrows``, ``itertuples`` and ``iteritems``, as it is easy that a user"
" looking for the method to iterate over columns ends up in the method to "
"iterate over rows, and vice-versa"
msgstr ""

#: ../../development/contributing_docstring.rst:528
msgid ""
"``fillna`` and ``dropna``, as both methods are used to handle missing "
"values"
msgstr ""

#: ../../development/contributing_docstring.rst:529
msgid "``read_csv`` and ``to_csv``, as they are complementary"
msgstr ""

#: ../../development/contributing_docstring.rst:530
msgid "``merge`` and ``join``, as one is a generalization of the other"
msgstr ""

#: ../../development/contributing_docstring.rst:531
msgid ""
"``astype`` and ``pandas.to_datetime``, as users may be reading the "
"documentation of ``astype`` to know how to cast as a date, and the way to"
" do it is with ``pandas.to_datetime``"
msgstr ""

#: ../../development/contributing_docstring.rst:534
msgid ""
"``where`` is related to ``numpy.where``, as its functionality is based on"
" it"
msgstr ""

#: ../../development/contributing_docstring.rst:536
msgid ""
"When deciding what is related, you should mainly use your common sense "
"and think about what can be useful for the users reading the "
"documentation, especially the less experienced ones."
msgstr ""

#: ../../development/contributing_docstring.rst:540
msgid ""
"When relating to other libraries (mainly ``numpy``), use the name of the "
"module first (not an alias like ``np``). If the function is in a module "
"which is not the main one, like ``scipy.sparse``, list the full module "
"(e.g. ``scipy.sparse.coo_matrix``)."
msgstr ""

#: ../../development/contributing_docstring.rst:545
msgid ""
"This section, as the previous, also has a header, \"See Also\" (note the "
"capital S and A). Also followed by the line with hyphens, and preceded by"
" a blank line."
msgstr ""

#: ../../development/contributing_docstring.rst:548
msgid ""
"After the header, we will add a line for each related method or function,"
" followed by a space, a colon, another space, and a short description "
"that illustrated what this method or function does, why is it relevant in"
" this context, and what are the key differences between the documented "
"function and the one referencing. The description must also finish with a"
" dot."
msgstr ""

#: ../../development/contributing_docstring.rst:554
msgid ""
"Note that in \"Returns\" and \"Yields\", the description is located in "
"the following line than the type. But in this section it is located in "
"the same line, with a colon in between. If the description does not fit "
"in the same line, it can continue in the next ones, but it has to be "
"indented in them."
msgstr ""

#: ../../development/contributing_docstring.rst:559
msgid "For example:"
msgstr ""

#: ../../development/contributing_docstring.rst:587
msgid "Section 6: Notes"
msgstr ""

#: ../../development/contributing_docstring.rst:589
msgid ""
"This is an optional section used for notes about the implementation of "
"the algorithm. Or to document technical aspects of the function behavior."
msgstr ""

#: ../../development/contributing_docstring.rst:592
msgid ""
"Feel free to skip it, unless you are familiar with the implementation of "
"the algorithm, or you discover some counter-intuitive behavior while "
"writing the examples for the function."
msgstr ""

#: ../../development/contributing_docstring.rst:596
msgid "This section follows the same format as the extended summary section."
msgstr ""

#: ../../development/contributing_docstring.rst:601
msgid "Section 7: Examples"
msgstr ""

#: ../../development/contributing_docstring.rst:603
msgid ""
"This is one of the most important sections of a docstring, even if it is "
"placed in the last position. As often, people understand concepts better "
"with examples, than with accurate explanations."
msgstr ""

#: ../../development/contributing_docstring.rst:607
msgid ""
"Examples in docstrings, besides illustrating the usage of the function or"
" method, must be valid Python code, that in a deterministic way returns "
"the presented output, and that can be copied and run by users."
msgstr ""

#: ../../development/contributing_docstring.rst:611
msgid ""
"They are presented as a session in the Python terminal. `>>>` is used to "
"present code. `...` is used for code continuing from the previous line. "
"Output is presented immediately after the last line of code generating "
"the output (no blank lines in between). Comments describing the examples "
"can be added with blank lines before and after them."
msgstr ""

#: ../../development/contributing_docstring.rst:617
msgid "The way to present examples is as follows:"
msgstr ""

#: ../../development/contributing_docstring.rst:619
msgid "Import required libraries (except ``numpy`` and ``pandas``)"
msgstr ""

#: ../../development/contributing_docstring.rst:621
msgid "Create the data required for the example"
msgstr ""

#: ../../development/contributing_docstring.rst:623
msgid "Show a very basic example that gives an idea of the most common use case"
msgstr ""

#: ../../development/contributing_docstring.rst:625
msgid ""
"Add examples with explanations that illustrate how the parameters can be "
"used for extended functionality"
msgstr ""

#: ../../development/contributing_docstring.rst:628
msgid "A simple example could be:"
msgstr ""

#: ../../development/contributing_docstring.rst:677
msgid ""
"The examples should be as concise as possible. In cases where the "
"complexity of the function requires long examples, is recommended to use "
"blocks with headers in bold. Use double star ``**`` to make a text bold, "
"like in ``**this example**``."
msgstr ""

#: ../../development/contributing_docstring.rst:684
msgid "Conventions for the examples"
msgstr ""

#: ../../development/contributing_docstring.rst:686
msgid ""
"Code in examples is assumed to always start with these two lines which "
"are not shown:"
msgstr ""

#: ../../development/contributing_docstring.rst:694
msgid ""
"Any other module used in the examples must be explicitly imported, one "
"per line (as recommended in :pep:`8#imports`) and avoiding aliases. Avoid"
" excessive imports, but if needed, imports from the standard library go "
"first, followed by third-party libraries (like matplotlib)."
msgstr ""

#: ../../development/contributing_docstring.rst:700
msgid ""
"When illustrating examples with a single ``Series`` use the name ``s``, "
"and if illustrating with a single ``DataFrame`` use the name ``df``. For "
"indices, ``idx`` is the preferred name. If a set of homogeneous "
"``Series`` or ``DataFrame`` is used, name them ``s1``, ``s2``, ``s3``..."
"  or ``df1``, ``df2``, ``df3``... If the data is not homogeneous, and "
"more than one structure is needed, name them with something meaningful, "
"for example ``df_main`` and ``df_to_join``."
msgstr ""

#: ../../development/contributing_docstring.rst:708
msgid ""
"Data used in the example should be as compact as possible. The number of "
"rows is recommended to be around 4, but make it a number that makes sense"
" for the specific example. For example in the ``head`` method, it "
"requires to be higher than 5, to show the example with the default "
"values. If doing the ``mean``, we could use something like ``[1, 2, 3]``,"
" so it is easy to see that the value returned is the mean."
msgstr ""

#: ../../development/contributing_docstring.rst:715
msgid ""
"For more complex examples (grouping for example), avoid using data "
"without interpretation, like a matrix of random numbers with columns A, "
"B, C, D... And instead use a meaningful example, which makes it easier to"
" understand the concept. Unless required by the example, use names of "
"animals, to keep examples consistent. And numerical properties of them."
msgstr ""

#: ../../development/contributing_docstring.rst:721
msgid ""
"When calling the method, keywords arguments ``head(n=3)`` are preferred "
"to positional arguments ``head(3)``."
msgstr ""

#: ../../development/contributing_docstring.rst:852
msgid "Tips for getting your examples pass the doctests"
msgstr ""

#: ../../development/contributing_docstring.rst:854
msgid ""
"Getting the examples pass the doctests in the validation script can "
"sometimes be tricky. Here are some attention points:"
msgstr ""

#: ../../development/contributing_docstring.rst:857
msgid ""
"Import all needed libraries (except for pandas and numpy, those are "
"already imported as ``import pandas as pd`` and ``import numpy as np``) "
"and define all variables you use in the example."
msgstr ""

#: ../../development/contributing_docstring.rst:861
msgid ""
"Try to avoid using random data. However random data might be OK in some "
"cases, like if the function you are documenting deals with probability "
"distributions, or if the amount of data needed to make the function "
"result meaningful is too much, such that creating it manually is very "
"cumbersome. In those cases, always use a fixed random seed to make the "
"generated examples predictable. Example::"
msgstr ""

#: ../../development/contributing_docstring.rst:871
msgid ""
"If you have a code snippet that wraps multiple lines, you need to use "
"'...' on the continued lines: ::"
msgstr ""

#: ../../development/contributing_docstring.rst:877
msgid "If you want to show a case where an exception is raised, you can do::"
msgstr ""

#: ../../development/contributing_docstring.rst:883
msgid ""
"It is essential to include the \"Traceback (most recent call last):\", "
"but for the actual error only the error name is sufficient."
msgstr ""

#: ../../development/contributing_docstring.rst:886
msgid ""
"If there is a small part of the result that can vary (e.g. a hash in an "
"object representation), you can use ``...`` to represent this part."
msgstr ""

#: ../../development/contributing_docstring.rst:889
msgid ""
"If you want to show that ``s.plot()`` returns a matplotlib AxesSubplot "
"object, this will fail the doctest ::"
msgstr ""

#: ../../development/contributing_docstring.rst:895
msgid "However, you can do (notice the comment that needs to be added) ::"
msgstr ""

#: ../../development/contributing_docstring.rst:904
msgid "Plots in examples"
msgstr ""

#: ../../development/contributing_docstring.rst:906
msgid ""
"There are some methods in pandas returning plots. To render the plots "
"generated by the examples in the documentation, the ``.. plot::`` "
"directive exists."
msgstr ""

#: ../../development/contributing_docstring.rst:909
msgid ""
"To use it, place the next code after the \"Examples\" header as shown "
"below. The plot will be generated automatically when building the "
"documentation."
msgstr ""

#: ../../development/contributing_docstring.rst:933
msgid "Sharing Docstrings"
msgstr ""

#: ../../development/contributing_docstring.rst:935
msgid ""
"Pandas has a system for sharing docstrings, with slight variations, "
"between classes. This helps us keep docstrings consistent, while keeping "
"things clear for the user reading. It comes at the cost of some "
"complexity when writing."
msgstr ""

#: ../../development/contributing_docstring.rst:939
#, python-format
msgid ""
"Each shared docstring will have a base template with variables, like "
"``%(klass)s``. The variables filled in later on using the "
"``Substitution`` decorator. Finally, docstrings can be appended to with "
"the ``Appender`` decorator."
msgstr ""

#: ../../development/contributing_docstring.rst:944
msgid ""
"In this example, we'll create a parent docstring normally (this is like "
"``pandas.core.generic.NDFrame``. Then we'll have two children (like "
"``pandas.core.series.Series`` and ``pandas.core.frame.DataFrame``). We'll"
" substitute the children's class names in this docstring."
msgstr ""

#: ../../development/contributing_docstring.rst:970
msgid "The resulting docstrings are"
msgstr ""

#: ../../development/contributing_docstring.rst:981
msgid "Notice two things:"
msgstr ""

#: ../../development/contributing_docstring.rst:983
msgid ""
"We \"append\" the parent docstring to the children docstrings, which are "
"initially empty."
msgstr ""

#: ../../development/contributing_docstring.rst:985
msgid ""
"Python decorators are applied inside out. So the order is Append then "
"Substitution, even though Substitution comes first in the file."
msgstr ""

#: ../../development/contributing_docstring.rst:988
msgid ""
"Our files will often contain a module-level ``_shared_doc_kwargs`` with "
"some common substitution values (things like ``klass``, ``axes``, etc)."
msgstr ""

#: ../../development/contributing_docstring.rst:991
msgid "You can substitute and append in one shot with something like"
msgstr ""

#: ../../development/contributing_docstring.rst:999
msgid ""
"where ``template`` may come from a module-level ``_shared_docs`` "
"dictionary mapping function names to docstrings. Wherever possible, we "
"prefer using ``Appender`` and ``Substitution``, since the docstring-"
"writing processes is slightly closer to normal."
msgstr ""

#: ../../development/contributing_docstring.rst:1004
msgid ""
"See ``pandas.core.generic.NDFrame.fillna`` for an example template, and "
"``pandas.core.series.Series.fillna`` and "
"``pandas.core.generic.frame.fillna`` for the filled versions."
msgstr ""


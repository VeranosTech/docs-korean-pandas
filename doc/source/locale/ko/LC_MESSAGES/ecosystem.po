# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../ecosystem.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../ecosystem.rst:7
msgid "pandas Ecosystem"
msgstr ""

#: ../../ecosystem.rst:9
msgid ""
"Increasingly, packages are being built on top of pandas to address "
"specific needs in data preparation, analysis and visualization. This is "
"encouraging because it means pandas is not only helping users to handle "
"their data tasks but also that it provides a better starting point for "
"developers to build powerful and more focused data tools. The creation of"
" libraries that complement pandas' functionality also allows pandas "
"development to remain focused around it's original requirements."
msgstr ""

#: ../../ecosystem.rst:17
msgid ""
"This is an inexhaustive list of projects that build on pandas in order to"
" provide tools in the PyData space. For a list of projects that depend on"
" pandas, see the `libraries.io usage page for pandas "
"<https://libraries.io/pypi/pandas/usage>`_ or `search pypi for pandas "
"<https://pypi.org/search/?q=pandas>`_."
msgstr ""

#: ../../ecosystem.rst:23
msgid ""
"We'd like to make it easier for users to find these projects, if you know"
" of other substantial projects that you feel should be on this list, "
"please let us know."
msgstr ""

#: ../../ecosystem.rst:30
msgid "Statistics and Machine Learning"
msgstr ""

#: ../../ecosystem.rst:33
msgid "`Statsmodels <https://www.statsmodels.org/>`__"
msgstr ""

#: ../../ecosystem.rst:35
msgid ""
"Statsmodels is the prominent Python \"statistics and econometrics "
"library\" and it has a long-standing special relationship with pandas. "
"Statsmodels provides powerful statistics, econometrics, analysis and "
"modeling functionality that is out of pandas' scope. Statsmodels "
"leverages pandas objects as the underlying data container for "
"computation."
msgstr ""

#: ../../ecosystem.rst:41
msgid "`sklearn-pandas <https://github.com/paulgb/sklearn-pandas>`__"
msgstr ""

#: ../../ecosystem.rst:43
msgid ""
"Use pandas DataFrames in your `scikit-learn <https://scikit-"
"learn.org/>`__ ML pipeline."
msgstr ""

#: ../../ecosystem.rst:47
msgid "`Featuretools <https://github.com/featuretools/featuretools/>`__"
msgstr ""

#: ../../ecosystem.rst:49
msgid ""
"Featuretools is a Python library for automated feature engineering built "
"on top of pandas. It excels at transforming temporal and relational "
"datasets into feature matrices for machine learning using reusable "
"feature engineering \"primitives\". Users can contribute their own "
"primitives in Python and share them with the rest of the community."
msgstr ""

#: ../../ecosystem.rst:54
msgid "Visualization"
msgstr ""

#: ../../ecosystem.rst:57
msgid "`Altair <https://altair-viz.github.io/>`__"
msgstr ""

#: ../../ecosystem.rst:59
msgid ""
"Altair is a declarative statistical visualization library for Python. "
"With Altair, you can spend more time understanding your data and its "
"meaning. Altair's API is simple, friendly and consistent and built on top"
" of the powerful Vega-Lite JSON specification. This elegant simplicity "
"produces beautiful and effective visualizations with a minimal amount of "
"code. Altair works with Pandas DataFrames."
msgstr ""

#: ../../ecosystem.rst:68
msgid "`Bokeh <https://bokeh.pydata.org>`__"
msgstr ""

#: ../../ecosystem.rst:70
msgid ""
"Bokeh is a Python interactive visualization library for large datasets "
"that natively uses the latest web technologies. Its goal is to provide "
"elegant, concise construction of novel graphics in the style of "
"Protovis/D3, while delivering high-performance interactivity over large "
"data to thin clients."
msgstr ""

#: ../../ecosystem.rst:76
msgid "`seaborn <https://seaborn.pydata.org>`__"
msgstr ""

#: ../../ecosystem.rst:78
msgid ""
"Seaborn is a Python visualization library based on `matplotlib "
"<https://matplotlib.org>`__. It provides a high-level, dataset-oriented "
"interface for creating attractive statistical graphics. The plotting "
"functions in seaborn understand pandas objects and leverage pandas "
"grouping operations internally to support concise specification of "
"complex visualizations. Seaborn also goes beyond matplotlib and pandas "
"with the option to perform statistical estimation while plotting, "
"aggregating across observations and visualizing the fit of statistical "
"models to emphasize patterns in a dataset."
msgstr ""

#: ../../ecosystem.rst:88
msgid "`yhat/ggpy <https://github.com/yhat/ggpy>`__"
msgstr ""

#: ../../ecosystem.rst:90
msgid ""
"Hadley Wickham's `ggplot2 <https://ggplot2.tidyverse.org/>`__ is a "
"foundational exploratory visualization package for the R language. Based "
"on `\"The Grammar of Graphics\" "
"<https://www.cs.uic.edu/~wilkinson/TheGrammarOfGraphics/GOG.html>`__ it "
"provides a powerful, declarative and extremely general way to generate "
"bespoke plots of any kind of data. It's really quite incredible. Various "
"implementations to other languages are available, but a faithful "
"implementation for Python users has long been missing. Although still "
"young (as of Jan-2014), the `yhat/ggpy <https://github.com/yhat/ggpy>`__ "
"project has been progressing quickly in that direction."
msgstr ""

#: ../../ecosystem.rst:99
msgid "`IPython Vega <https://github.com/vega/ipyvega>`__"
msgstr ""

#: ../../ecosystem.rst:101
msgid ""
"`IPython Vega <https://github.com/vega/ipyvega>`__ leverages `Vega "
"<https://github.com/trifacta/vega>`__ to create plots within Jupyter "
"Notebook."
msgstr ""

#: ../../ecosystem.rst:105
msgid "`Plotly <https://plot.ly/python>`__"
msgstr ""

#: ../../ecosystem.rst:107
msgid ""
"`Plotlyâ€™s <https://plot.ly/>`__ `Python API <https://plot.ly/python/>`__ "
"enables interactive figures and web shareability. Maps, 2D, 3D, and live-"
"streaming graphs are rendered with WebGL and `D3.js "
"<https://d3js.org/>`__. The library supports plotting directly from a "
"pandas DataFrame and cloud-based collaboration. Users of `matplotlib, "
"ggplot for Python, and Seaborn <https://plot.ly/python/matplotlib-to-"
"plotly-tutorial/>`__ can convert figures into interactive web-based "
"plots. Plots can be drawn in `IPython Notebooks <https://plot.ly/ipython-"
"notebooks/>`__ , edited with R or MATLAB, modified in a GUI, or embedded "
"in apps and dashboards. Plotly is free for unlimited sharing, and has "
"`cloud <https://plot.ly/product/plans/>`__, `offline "
"<https://plot.ly/python/offline/>`__, or `on-premise "
"<https://plot.ly/product/enterprise/>`__ accounts for private use."
msgstr ""

#: ../../ecosystem.rst:110
msgid "`QtPandas <https://github.com/draperjames/qtpandas>`__"
msgstr ""

#: ../../ecosystem.rst:112
msgid ""
"Spun off from the main pandas library, the `qtpandas "
"<https://github.com/draperjames/qtpandas>`__ library enables DataFrame "
"visualization and manipulation in PyQt4 and PySide applications."
msgstr ""

#: ../../ecosystem.rst:119
msgid "IDE"
msgstr ""

#: ../../ecosystem.rst:122
msgid "`IPython <https://ipython.org/documentation.html>`__"
msgstr ""

#: ../../ecosystem.rst:124
msgid ""
"IPython is an interactive command shell and distributed computing "
"environment. IPython tab completion works with Pandas methods and also "
"attributes like DataFrame columns."
msgstr ""

#: ../../ecosystem.rst:129
msgid "`Jupyter Notebook / Jupyter Lab <https://jupyter.org>`__"
msgstr ""

#: ../../ecosystem.rst:130
msgid ""
"Jupyter Notebook is a web application for creating Jupyter notebooks. A "
"Jupyter notebook is a JSON document containing an ordered list of "
"input/output cells which can contain code, text, mathematics, plots and "
"rich media. Jupyter notebooks can be converted to a number of open "
"standard output formats (HTML, HTML presentation slides, LaTeX, PDF, "
"ReStructuredText, Markdown, Python) through 'Download As' in the web "
"interface and ``jupyter convert`` in a shell."
msgstr ""

#: ../../ecosystem.rst:139
msgid ""
"Pandas DataFrames implement ``_repr_html_``and ``_repr_latex`` methods "
"which are utilized by Jupyter Notebook for displaying (abbreviated) HTML "
"or LaTeX tables. LaTeX output is properly escaped. (Note: HTML tables may"
" or may not be compatible with non-HTML Jupyter output formats.)"
msgstr ""

#: ../../ecosystem.rst:145
msgid ""
"See :ref:`Options and Settings <options>` and :ref:`Available Options "
"<options.available>` for pandas ``display.`` settings."
msgstr ""

#: ../../ecosystem.rst:150
msgid "`quantopian/qgrid <https://github.com/quantopian/qgrid>`__"
msgstr ""

#: ../../ecosystem.rst:152
msgid ""
"qgrid is \"an interactive grid for sorting and filtering DataFrames in "
"IPython Notebook\" built with SlickGrid."
msgstr ""

#: ../../ecosystem.rst:156
msgid "`Spyder <https://www.spyder-ide.org/>`__"
msgstr ""

#: ../../ecosystem.rst:158
msgid ""
"Spyder is a cross-platform PyQt-based IDE combining the editing, "
"analysis, debugging and profiling functionality of a software development"
" tool with the data exploration, interactive execution, deep inspection "
"and rich visualization capabilities of a scientific environment like "
"MATLAB or Rstudio."
msgstr ""

#: ../../ecosystem.rst:163
msgid ""
"Its `Variable Explorer <https://docs.spyder-"
"ide.org/variableexplorer.html>`__ allows users to view, manipulate and "
"edit pandas ``Index``, ``Series``, and ``DataFrame`` objects like a "
"\"spreadsheet\", including copying and modifying values, sorting, "
"displaying a \"heatmap\", converting data types and more. Pandas objects "
"can also be renamed, duplicated, new columns added, copyed/pasted to/from"
" the clipboard (as TSV), and saved/loaded to/from a file. Spyder can also"
" import data from a variety of plain text and binary files or the "
"clipboard into a new pandas DataFrame via a sophisticated import wizard."
msgstr ""

#: ../../ecosystem.rst:172
msgid ""
"Most pandas classes, methods and data attributes can be autocompleted in "
"Spyder's `Editor <https://docs.spyder-ide.org/editor.html>`__ and "
"`IPython Console <https://docs.spyder-ide.org/ipythonconsole.html>`__, "
"and Spyder's `Help pane <https://docs.spyder-ide.org/help.html>`__ can "
"retrieve and render Numpydoc documentation on pandas objects in rich text"
" with Sphinx both automatically and on-demand."
msgstr ""

#: ../../ecosystem.rst:183
msgid "API"
msgstr ""

#: ../../ecosystem.rst:186
msgid "`pandas-datareader <https://github.com/pydata/pandas-datareader>`__"
msgstr ""

#: ../../ecosystem.rst:187
msgid ""
"``pandas-datareader`` is a remote data access library for pandas (PyPI"
":``pandas-datareader``). It is based on functionality that was located in"
" ``pandas.io.data`` and ``pandas.io.wb`` but was split off in v0.19. See "
"more in the  `pandas-datareader docs <https://pandas-"
"datareader.readthedocs.io/en/latest/>`_:"
msgstr ""

#: ../../ecosystem.rst:192
msgid "The following data feeds are available:"
msgstr ""

#: ../../ecosystem.rst:194
msgid "Google Finance"
msgstr ""

#: ../../ecosystem.rst:195
msgid "Tiingo"
msgstr ""

#: ../../ecosystem.rst:196
msgid "Morningstar"
msgstr ""

#: ../../ecosystem.rst:197
msgid "IEX"
msgstr ""

#: ../../ecosystem.rst:198
msgid "Robinhood"
msgstr ""

#: ../../ecosystem.rst:199
msgid "Enigma"
msgstr ""

#: ../../ecosystem.rst:200
msgid "Quandl"
msgstr ""

#: ../../ecosystem.rst:201
msgid "FRED"
msgstr ""

#: ../../ecosystem.rst:202
msgid "Fama/French"
msgstr ""

#: ../../ecosystem.rst:203
msgid "World Bank"
msgstr ""

#: ../../ecosystem.rst:204
msgid "OECD"
msgstr ""

#: ../../ecosystem.rst:205
msgid "Eurostat"
msgstr ""

#: ../../ecosystem.rst:206
msgid "TSP Fund Data"
msgstr ""

#: ../../ecosystem.rst:207
msgid "Nasdaq Trader Symbol Definitions"
msgstr ""

#: ../../ecosystem.rst:208
msgid "Stooq Index Data"
msgstr ""

#: ../../ecosystem.rst:209
msgid "MOEX Data"
msgstr ""

#: ../../ecosystem.rst:212
msgid "`quandl/Python <https://github.com/quandl/Python>`__"
msgstr ""

#: ../../ecosystem.rst:213
msgid ""
"Quandl API for Python wraps the Quandl REST API to return Pandas "
"DataFrames with timeseries indexes."
msgstr ""

#: ../../ecosystem.rst:217
msgid "`pydatastream <https://github.com/vfilimonov/pydatastream>`__"
msgstr ""

#: ../../ecosystem.rst:218
msgid ""
"PyDatastream is a Python interface to the `Thomson Dataworks Enterprise "
"(DWE/Datastream) "
"<http://dataworks.thomson.com/Dataworks/Enterprise/1.0/>`__ SOAP API to "
"return indexed Pandas DataFrames with financial data. This package "
"requires valid credentials for this API (non free)."
msgstr ""

#: ../../ecosystem.rst:224
msgid "`pandaSDMX <https://pandasdmx.readthedocs.io>`__"
msgstr ""

#: ../../ecosystem.rst:225
msgid ""
"pandaSDMX is a library to retrieve and acquire statistical data and "
"metadata disseminated in `SDMX <https://www.sdmx.org>`_ 2.1, an ISO-"
"standard widely used by institutions such as statistics offices, central "
"banks, and international organisations. pandaSDMX can expose datasets and"
" related structural metadata including data flows, code-lists, and data "
"structure definitions as pandas Series or MultiIndexed DataFrames."
msgstr ""

#: ../../ecosystem.rst:235
msgid "`fredapi <https://github.com/mortada/fredapi>`__"
msgstr ""

#: ../../ecosystem.rst:236
msgid ""
"fredapi is a Python interface to the `Federal Reserve Economic Data "
"(FRED) <https://fred.stlouisfed.org/>`__ provided by the Federal Reserve "
"Bank of St. Louis. It works with both the FRED database and ALFRED "
"database that contains point-in-time data (i.e. historic data revisions)."
" fredapi provides a wrapper in Python to the FRED HTTP API, and also "
"provides several convenient methods for parsing and analyzing point-in-"
"time data from ALFRED. fredapi makes use of pandas and returns data in a "
"Series or DataFrame. This module requires a FRED API key that you can "
"obtain for free on the FRED website."
msgstr ""

#: ../../ecosystem.rst:247
msgid "Domain Specific"
msgstr ""

#: ../../ecosystem.rst:250
msgid "`Geopandas <https://github.com/kjordahl/geopandas>`__"
msgstr ""

#: ../../ecosystem.rst:252
msgid ""
"Geopandas extends pandas data objects to include geographic information "
"which support geometric operations. If your work entails maps and "
"geographical coordinates, and you love pandas, you should take a close "
"look at Geopandas."
msgstr ""

#: ../../ecosystem.rst:257
msgid "`xarray <https://github.com/pydata/xarray>`__"
msgstr ""

#: ../../ecosystem.rst:259
msgid ""
"xarray brings the labeled data power of pandas to the physical sciences "
"by providing N-dimensional variants of the core pandas data structures. "
"It aims to provide a pandas-like and pandas-compatible toolkit for "
"analytics on multi- dimensional arrays, rather than the tabular data for "
"which pandas excels."
msgstr ""

#: ../../ecosystem.rst:268
msgid "Out-of-core"
msgstr ""

#: ../../ecosystem.rst:271
msgid "`Blaze <http://blaze.pydata.org/>`__"
msgstr ""

#: ../../ecosystem.rst:273
msgid ""
"Blaze provides a standard API for doing computations with various in-"
"memory and on-disk backends: NumPy, Pandas, SQLAlchemy, MongoDB, "
"PyTables, PySpark."
msgstr ""

#: ../../ecosystem.rst:278
msgid "`Dask <https://dask.readthedocs.io/en/latest/>`__"
msgstr ""

#: ../../ecosystem.rst:280
msgid ""
"Dask is a flexible parallel computing library for analytics. Dask "
"provides a familiar ``DataFrame`` interface for out-of-core, parallel and"
" distributed computing."
msgstr ""

#: ../../ecosystem.rst:284
msgid "`Dask-ML <https://dask-ml.readthedocs.io/en/latest/>`__"
msgstr ""

#: ../../ecosystem.rst:286
msgid ""
"Dask-ML enables parallel and distributed machine learning using Dask "
"alongside existing machine learning libraries like Scikit-Learn, XGBoost,"
" and TensorFlow."
msgstr ""

#: ../../ecosystem.rst:289
msgid "`Odo <http://odo.pydata.org>`__"
msgstr ""

#: ../../ecosystem.rst:291
msgid ""
"Odo provides a uniform API for moving data between different formats. It "
"uses pandas own ``read_csv`` for CSV IO and leverages many existing "
"packages such as PyTables, h5py, and pymongo to move data between non "
"pandas formats. Its graph based approach is also extensible by end users "
"for custom formats that may be too specific for the core of odo."
msgstr ""

#: ../../ecosystem.rst:298
msgid "`Ray <https://ray.readthedocs.io/en/latest/pandas_on_ray.html>`__"
msgstr ""

#: ../../ecosystem.rst:300
msgid ""
"Pandas on Ray is an early stage DataFrame library that wraps Pandas and "
"transparently distributes the data and computation. The user does not "
"need to know how many cores their system has, nor do they need to specify"
" how to distribute the data. In fact, users can continue using their "
"previous Pandas notebooks while experiencing a considerable speedup from "
"Pandas on Ray, even on a single machine. Only a modification of the "
"import statement is needed, as we demonstrate below. Once youâ€™ve changed "
"your import statement, youâ€™re ready to use Pandas on Ray just like you "
"would Pandas."
msgstr ""

#: ../../ecosystem.rst:309
msgid "`Vaex <https://docs.vaex.io/>`__"
msgstr ""

#: ../../ecosystem.rst:311
msgid ""
"Increasingly, packages are being built on top of pandas to address "
"specific needs in data preparation, analysis and visualization. Vaex is a"
" python library for Out-of-Core DataFrames (similar to Pandas), to "
"visualize and explore big tabular datasets. It can calculate statistics "
"such as mean, sum, count, standard deviation etc, on an N-dimensional "
"grid up to a billion (10\\ :sup:`9`) objects/rows per second. "
"Visualization is done using histograms, density plots and 3d volume "
"rendering, allowing interactive exploration of big data. Vaex uses memory"
" mapping, zero memory copy policy and lazy computations for best "
"performance (no memory wasted)."
msgstr ""

#: ../../ecosystem.rst:313
msgid "vaex.from_pandas"
msgstr ""

#: ../../ecosystem.rst:314
msgid "vaex.to_pandas_df"
msgstr ""

#: ../../ecosystem.rst:320
msgid "Data validation"
msgstr ""

#: ../../ecosystem.rst:323
msgid "`Engarde <https://engarde.readthedocs.io/en/latest/>`__"
msgstr ""

#: ../../ecosystem.rst:325
msgid ""
"Engarde is a lightweight library used to explicitly state your "
"assumptions about your datasets and check that they're *actually* true."
msgstr ""

#: ../../ecosystem.rst:331
msgid "Extension Data Types"
msgstr ""

#: ../../ecosystem.rst:333
msgid ""
"Pandas provides an interface for defining :ref:`extension types "
"<extending.extension-types>` to extend NumPy's type system. The following"
" libraries implement that interface to provide types not found in NumPy "
"or pandas, which work well with pandas' data containers."
msgstr ""

#: ../../ecosystem.rst:339 ../../ecosystem.rst:356
msgid "`cyberpandas`_"
msgstr ""

#: ../../ecosystem.rst:341
msgid ""
"Cyberpandas provides an extension type for storing arrays of IP "
"Addresses. These arrays can be stored inside pandas' Series and "
"DataFrame."
msgstr ""

#: ../../ecosystem.rst:347
msgid "Accessors"
msgstr ""

#: ../../ecosystem.rst:349
msgid ""
"A directory of projects providing :ref:`extension accessors <extending"
".register-accessors>`. This is for users to discover new accessors and "
"for library authors to coordinate on the namespace."
msgstr ""

#: ../../ecosystem.rst:354
msgid "Library"
msgstr ""

#: ../../ecosystem.rst:354
msgid "Accessor"
msgstr ""

#: ../../ecosystem.rst:354
msgid "Classes"
msgstr ""

#: ../../ecosystem.rst:356
msgid "``ip``"
msgstr ""

#: ../../ecosystem.rst:356
msgid "``Series``"
msgstr ""

#: ../../ecosystem.rst:357
msgid "`pdvega`_"
msgstr ""

#: ../../ecosystem.rst:357
msgid "``vgplot``"
msgstr ""

#: ../../ecosystem.rst:357
msgid "``Series``, ``DataFrame``"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../reference/api/pandas.DataFrame.query.rst:2
msgid "pandas.DataFrame.query"
msgstr ""

#: of pandas.DataFrame.query:2
msgid "Query the columns of a DataFrame with a boolean expression."
msgstr ""

#: of pandas.DataFrame.query
msgid "Parameters"
msgstr ""

#: of pandas.DataFrame.query:10
msgid "**expr**"
msgstr ""

#: of pandas.DataFrame.query:9
msgid "string"
msgstr ""

#: of pandas.DataFrame.query:8
msgid ""
"The query string to evaluate.  You can refer to variables in the "
"environment by prefixing them with an '@' character like ``@a + b``."
msgstr ""

#: of pandas.DataFrame.query:16
msgid "**inplace**"
msgstr ""

#: of pandas.DataFrame.query:15
msgid "bool"
msgstr ""

#: of pandas.DataFrame.query:13
msgid ""
"Whether the query should modify the data in place or return a modified "
"copy"
msgstr ""

#: of pandas.DataFrame.query:20
msgid "**kwargs**"
msgstr ""

#: of pandas.DataFrame.query:19
msgid "dict"
msgstr ""

#: of pandas.DataFrame.query:19
msgid ""
"See the documentation for :func:`pandas.eval` for complete details on the"
" keyword arguments accepted by :meth:`DataFrame.query`."
msgstr ""

#: of pandas.DataFrame.query
msgid "Returns"
msgstr ""

#: of pandas.DataFrame.query:30
msgid "**q**"
msgstr ""

#: of pandas.DataFrame.query:29
msgid "DataFrame"
msgstr ""

#: of pandas.DataFrame.query:35
msgid ":obj:`pandas.eval`, :obj:`DataFrame.eval`"
msgstr ""

#: of pandas.DataFrame.query:38
msgid "Notes"
msgstr ""

#: of pandas.DataFrame.query:39
msgid ""
"The result of the evaluation of this expression is first passed to "
":attr:`DataFrame.loc` and if that fails because of a multidimensional key"
" (e.g., a DataFrame) then the result will be passed to "
":meth:`DataFrame.__getitem__`."
msgstr ""

#: of pandas.DataFrame.query:44
msgid ""
"This method uses the top-level :func:`pandas.eval` function to evaluate "
"the passed query."
msgstr ""

#: of pandas.DataFrame.query:47
msgid ""
"The :meth:`~pandas.DataFrame.query` method uses a slightly modified "
"Python syntax by default. For example, the ``&`` and ``|`` (bitwise) "
"operators have the precedence of their boolean cousins, :keyword:`and` "
"and :keyword:`or`. This *is* syntactically valid Python, however the "
"semantics are different."
msgstr ""

#: of pandas.DataFrame.query:53
msgid ""
"You can change the semantics of the expression by passing the keyword "
"argument ``parser='python'``. This enforces the same semantics as "
"evaluation in Python space. Likewise, you can pass ``engine='python'`` to"
" evaluate an expression using Python itself as a backend. This is not "
"recommended as it is inefficient compared to using ``numexpr`` as the "
"engine."
msgstr ""

#: of pandas.DataFrame.query:60
msgid ""
"The :attr:`DataFrame.index` and :attr:`DataFrame.columns` attributes of "
"the :class:`~pandas.DataFrame` instance are placed in the query namespace"
" by default, which allows you to treat both the index and columns of the "
"frame as a column in the frame. The identifier ``index`` is used for the "
"frame index; you can also use the name of the index to identify it in a "
"query. Please note that Python keywords may not be used as identifiers."
msgstr ""

#: of pandas.DataFrame.query:69
msgid ""
"For further details and examples see the ``query`` documentation in "
":ref:`indexing <indexing.query>`."
msgstr ""

#: of pandas.DataFrame.query:74
msgid "Examples"
msgstr ""


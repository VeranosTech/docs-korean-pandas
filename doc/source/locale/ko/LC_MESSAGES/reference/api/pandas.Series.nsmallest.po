# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../reference/api/pandas.Series.nsmallest.rst:2
msgid "pandas.Series.nsmallest"
msgstr ""

#: of pandas.Series.nsmallest:2
msgid "Return the smallest `n` elements."
msgstr ""

#: of pandas.Series.nsmallest
msgid "Parameters"
msgstr ""

#: of pandas.Series.nsmallest:8
msgid "**n**"
msgstr ""

#: of pandas.Series.nsmallest:7
msgid "int, default 5"
msgstr ""

#: of pandas.Series.nsmallest:8
msgid "Return this many ascending sorted values."
msgstr ""

#: of pandas.Series.nsmallest:17
msgid "**keep**"
msgstr ""

#: of pandas.Series.nsmallest:16
msgid "{'first', 'last', 'all'}, default 'first'"
msgstr ""

#: of pandas.Series.nsmallest:11
msgid ""
"When there are duplicate values that cannot all fit in a Series of `n` "
"elements:"
msgstr ""

#: of pandas.Series.nsmallest:14
msgid "``first`` : take the first occurrences based on the index order"
msgstr ""

#: of pandas.Series.nsmallest:15
msgid "``last`` : take the last occurrences based on the index order"
msgstr ""

#: of pandas.Series.nsmallest:17
msgid "``all``"
msgstr ""

#: of pandas.Series.nsmallest:16
msgid "keep all occurrences. This can result in a Series of"
msgstr ""

#: of pandas.Series.nsmallest:17
msgid "size larger than `n`."
msgstr ""

#: of pandas.Series.nsmallest
msgid "Returns"
msgstr ""

#: of pandas.Series.nsmallest:27
msgid "**Series**"
msgstr ""

#: of pandas.Series.nsmallest:22
msgid "The `n` smallest values in the Series, sorted in increasing order."
msgstr ""

#: of pandas.Series.nsmallest:33
msgid ":obj:`Series.nlargest`"
msgstr ""

#: of pandas.Series.nsmallest:33
msgid "Get the `n` largest elements."
msgstr ""

#: of pandas.Series.nsmallest:36
msgid ":obj:`Series.sort_values`"
msgstr ""

#: of pandas.Series.nsmallest:36
msgid "Sort Series by values."
msgstr ""

#: of pandas.Series.nsmallest:38
msgid ":obj:`Series.head`"
msgstr ""

#: of pandas.Series.nsmallest:39
msgid "Return the first `n` rows."
msgstr ""

#: of pandas.Series.nsmallest:42
msgid "Notes"
msgstr ""

#: of pandas.Series.nsmallest:43
msgid ""
"Faster than ``.sort_values().head(n)`` for small `n` relative to the size"
" of the ``Series`` object."
msgstr ""

#: of pandas.Series.nsmallest:48
msgid "Examples"
msgstr ""

#: of pandas.Series.nsmallest:68
msgid "The `n` largest elements where ``n=5`` by default."
msgstr ""

#: of pandas.Series.nsmallest:78
msgid ""
"The `n` smallest elements where ``n=3``. Default `keep` value is 'first' "
"so Nauru and Tuvalu will be kept."
msgstr ""

#: of pandas.Series.nsmallest:87
msgid ""
"The `n` smallest elements where ``n=3`` and keeping the last duplicates. "
"Anguilla and Tuvalu will be kept since they are the last with value 11300"
" based on the index order."
msgstr ""

#: of pandas.Series.nsmallest:97
msgid ""
"The `n` smallest elements where ``n=3`` with all duplicates kept. Note "
"that the returned Series has four elements due to the three duplicates."
msgstr ""


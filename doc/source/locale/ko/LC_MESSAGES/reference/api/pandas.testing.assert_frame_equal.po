# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../reference/api/pandas.testing.assert_frame_equal.rst:2
msgid "pandas.testing.assert\\_frame\\_equal"
msgstr ""

#: of pandas.testing.assert_frame_equal:2
msgid "Check that left and right DataFrame are equal."
msgstr ""

#: of pandas.testing.assert_frame_equal:4
msgid ""
"This function is intended to compare two DataFrames and output any "
"differences. Is is mostly intended for use in unit tests. Additional "
"parameters allow varying the strictness of the equality checks performed."
msgstr ""

#: of pandas.testing.assert_frame_equal
msgid "Parameters"
msgstr ""

#: of pandas.testing.assert_frame_equal:12
msgid "**left**"
msgstr ""

#: of pandas.testing.assert_frame_equal:11 pandas.testing.assert_frame_equal:14
msgid "DataFrame"
msgstr ""

#: of pandas.testing.assert_frame_equal:12
msgid "First DataFrame to compare."
msgstr ""

#: of pandas.testing.assert_frame_equal:15
msgid "**right**"
msgstr ""

#: of pandas.testing.assert_frame_equal:15
msgid "Second DataFrame to compare."
msgstr ""

#: of pandas.testing.assert_frame_equal:18
msgid "**check_dtype**"
msgstr ""

#: of pandas.testing.assert_frame_equal:17 pandas.testing.assert_frame_equal:29
#: pandas.testing.assert_frame_equal:41 pandas.testing.assert_frame_equal:54
msgid "bool, default True"
msgstr ""

#: of pandas.testing.assert_frame_equal:18
msgid "Whether to check the DataFrame dtype is identical."
msgstr ""

#: of pandas.testing.assert_frame_equal:22
msgid "**check_index_type**"
msgstr ""

#: of pandas.testing.assert_frame_equal:21 pandas.testing.assert_frame_equal:26
msgid "bool / string {'equiv'}, default 'equiv'"
msgstr ""

#: of pandas.testing.assert_frame_equal:21
msgid "Whether to check the Index class, dtype and inferred_type are identical."
msgstr ""

#: of pandas.testing.assert_frame_equal:27
msgid "**check_column_type**"
msgstr ""

#: of pandas.testing.assert_frame_equal:25
msgid ""
"Whether to check the columns class, dtype and inferred_type are "
"identical. Is passed as the ``exact`` argument of "
":func:`assert_index_equal`."
msgstr ""

#: of pandas.testing.assert_frame_equal:30
msgid "**check_frame_type**"
msgstr ""

#: of pandas.testing.assert_frame_equal:30
msgid "Whether to check the DataFrame class is identical."
msgstr ""

#: of pandas.testing.assert_frame_equal:35
msgid "**check_less_precise**"
msgstr ""

#: of pandas.testing.assert_frame_equal:34
msgid "bool or int, default False"
msgstr ""

#: of pandas.testing.assert_frame_equal:33
msgid ""
"Specify comparison precision. Only used when check_exact is False. 5 "
"digits (False) or 3 digits (True) after decimal points are compared. If "
"int, then specify the digits to compare."
msgstr ""

#: of pandas.testing.assert_frame_equal:42
msgid "**check_names**"
msgstr ""

#: of pandas.testing.assert_frame_equal:38
msgid ""
"Whether to check that the `names` attribute for both the `index` and "
"`column` attributes of the DataFrame is identical, i.e."
msgstr ""

#: of pandas.testing.assert_frame_equal:41
msgid "left.index.names == right.index.names"
msgstr ""

#: of pandas.testing.assert_frame_equal:42
msgid "left.columns.names == right.columns.names"
msgstr ""

#: of pandas.testing.assert_frame_equal:46
msgid "**by_blocks**"
msgstr ""

#: of pandas.testing.assert_frame_equal:45 pandas.testing.assert_frame_equal:48
#: pandas.testing.assert_frame_equal:51 pandas.testing.assert_frame_equal:59
msgid "bool, default False"
msgstr ""

#: of pandas.testing.assert_frame_equal:45
msgid ""
"Specify how to compare internal data. If False, compare by columns. If "
"True, compare by blocks."
msgstr ""

#: of pandas.testing.assert_frame_equal:49
msgid "**check_exact**"
msgstr ""

#: of pandas.testing.assert_frame_equal:49
msgid "Whether to compare number exactly."
msgstr ""

#: of pandas.testing.assert_frame_equal:52
msgid "**check_datetimelike_compat**"
msgstr ""

#: of pandas.testing.assert_frame_equal:52
msgid "Compare datetime-like which is comparable ignoring dtype."
msgstr ""

#: of pandas.testing.assert_frame_equal:55
msgid "**check_categorical**"
msgstr ""

#: of pandas.testing.assert_frame_equal:55
msgid "Whether to compare internal Categorical exactly."
msgstr ""

#: of pandas.testing.assert_frame_equal:60
msgid "**check_like**"
msgstr ""

#: of pandas.testing.assert_frame_equal:58
msgid ""
"If True, ignore the order of index & columns. Note: index labels must "
"match their respective rows (same as in columns) - same labels must be "
"with the same data."
msgstr ""

#: of pandas.testing.assert_frame_equal:70
msgid "**obj**"
msgstr ""

#: of pandas.testing.assert_frame_equal:69
msgid "str, default 'DataFrame'"
msgstr ""

#: of pandas.testing.assert_frame_equal:63
msgid ""
"Specify object name being compared, internally used to show appropriate "
"assertion message."
msgstr ""

#: of pandas.testing.assert_frame_equal:76
msgid ":obj:`assert_series_equal`"
msgstr ""

#: of pandas.testing.assert_frame_equal:76
msgid "Equivalent method for asserting Series equality."
msgstr ""

#: of pandas.testing.assert_frame_equal:78
msgid ":obj:`DataFrame.equals`"
msgstr ""

#: of pandas.testing.assert_frame_equal:79
msgid "Check DataFrame equality."
msgstr ""

#: of pandas.testing.assert_frame_equal:84
msgid "Examples"
msgstr ""

#: of pandas.testing.assert_frame_equal:85
msgid ""
"This example shows comparing two DataFrames that are equal but with "
"columns of differing dtypes."
msgstr ""

#: of pandas.testing.assert_frame_equal:92
msgid "df1 equals itself. >>> assert_frame_equal(df1, df1)"
msgstr ""

#: of pandas.testing.assert_frame_equal:95
msgid ""
"df1 differs from df2 as column 'b' is of a different type. >>> "
"assert_frame_equal(df1, df2) Traceback (most recent call last): "
"AssertionError: Attributes are different"
msgstr ""

#: of pandas.testing.assert_frame_equal:100
msgid "Attribute \"dtype\" are different [left]:  int64 [right]: float64"
msgstr ""

#: of pandas.testing.assert_frame_equal:104
msgid ""
"Ignore differing dtypes in columns with check_dtype. >>> "
"assert_frame_equal(df1, df2, check_dtype=False)"
msgstr ""


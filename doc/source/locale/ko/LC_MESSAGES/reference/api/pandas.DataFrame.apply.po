# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../reference/api/pandas.DataFrame.apply.rst:2
msgid "pandas.DataFrame.apply"
msgstr ""

#: of pandas.DataFrame.apply:2
msgid "Apply a function along an axis of the DataFrame."
msgstr ""

#: of pandas.DataFrame.apply:4
msgid ""
"Objects passed to the function are Series objects whose index is either "
"the DataFrame's index (``axis=0``) or the DataFrame's columns "
"(``axis=1``). By default (``result_type=None``), the final return type is"
" inferred from the return type of the applied function. Otherwise, it "
"depends on the `result_type` argument."
msgstr ""

#: of pandas.DataFrame.apply
msgid "Parameters"
msgstr ""

#: of pandas.DataFrame.apply:13
msgid "**func**"
msgstr ""

#: of pandas.DataFrame.apply:12
msgid "function"
msgstr ""

#: of pandas.DataFrame.apply:13
msgid "Function to apply to each column or row."
msgstr ""

#: of pandas.DataFrame.apply:19
msgid "**axis**"
msgstr ""

#: of pandas.DataFrame.apply:18
msgid "{0 or 'index', 1 or 'columns'}, default 0"
msgstr ""

#: of pandas.DataFrame.apply:16
msgid "Axis along which the function is applied:"
msgstr ""

#: of pandas.DataFrame.apply:18
msgid "0 or 'index': apply function to each column."
msgstr ""

#: of pandas.DataFrame.apply:19
msgid "1 or 'columns': apply function to each row."
msgstr ""

#: of pandas.DataFrame.apply:32
msgid "**broadcast**"
msgstr ""

#: of pandas.DataFrame.apply:31
msgid "bool, optional"
msgstr ""

#: of pandas.DataFrame.apply:22
msgid "Only relevant for aggregation functions:"
msgstr ""

#: of pandas.DataFrame.apply:24
msgid ""
"``False`` or ``None`` : returns a Series whose length is the length of "
"the index or the number of columns (based on the `axis` parameter)"
msgstr ""

#: of pandas.DataFrame.apply:27
msgid ""
"``True`` : results will be broadcast to the original shape of the frame, "
"the original index and columns will be retained."
msgstr ""

#: of pandas.DataFrame.apply:30
msgid ""
"This argument will be removed in a future version, replaced by "
"result_type='broadcast'."
msgstr ""

#: of pandas.DataFrame.apply:40
msgid "**raw**"
msgstr ""

#: of pandas.DataFrame.apply:39
msgid "bool, default False"
msgstr ""

#: of pandas.DataFrame.apply:35
msgid "``False`` : passes each row or column as a Series to the function."
msgstr ""

#: of pandas.DataFrame.apply:37
msgid ""
"``True`` : the passed function will receive ndarray objects instead. If "
"you are just applying a NumPy reduction function this will achieve much "
"better performance."
msgstr ""

#: of pandas.DataFrame.apply:55
msgid "**reduce**"
msgstr ""

#: of pandas.DataFrame.apply:54
msgid "bool or None, default None"
msgstr ""

#: of pandas.DataFrame.apply:43
msgid ""
"Try to apply reduction procedures. If the DataFrame is empty, `apply` "
"will use `reduce` to determine whether the result should be a Series or a"
" DataFrame. If ``reduce=None`` (the default), `apply`'s return value will"
" be guessed by calling `func` on an empty Series (note: while guessing, "
"exceptions raised by `func` will be ignored). If ``reduce=True`` a Series"
" will always be returned, and if ``reduce=False`` a DataFrame will always"
" be returned."
msgstr ""

#: of pandas.DataFrame.apply:53
msgid ""
"This argument will be removed in a future version, replaced by "
"``result_type='reduce'``."
msgstr ""

#: of pandas.DataFrame.apply:72
msgid "**result_type**"
msgstr ""

#: of pandas.DataFrame.apply:71
msgid "{'expand', 'reduce', 'broadcast', None}, default None"
msgstr ""

#: of pandas.DataFrame.apply:58
msgid "These only act when ``axis=1`` (columns):"
msgstr ""

#: of pandas.DataFrame.apply:60
msgid "'expand' : list-like results will be turned into columns."
msgstr ""

#: of pandas.DataFrame.apply:61
msgid ""
"'reduce' : returns a Series if possible rather than expanding list-like "
"results. This is the opposite of 'expand'."
msgstr ""

#: of pandas.DataFrame.apply:63
msgid ""
"'broadcast' : results will be broadcast to the original shape of the "
"DataFrame, the original index and columns will be retained."
msgstr ""

#: of pandas.DataFrame.apply:67
msgid ""
"The default behaviour (None) depends on the return value of the applied "
"function: list-like results will be returned as a Series of those. "
"However if the apply function returns a Series these are expanded to "
"columns."
msgstr ""

#: of pandas.DataFrame.apply:76
msgid "**args**"
msgstr ""

#: of pandas.DataFrame.apply:75
msgid "tuple"
msgstr ""

#: of pandas.DataFrame.apply:75
msgid "Positional arguments to pass to `func` in addition to the array/series."
msgstr ""

#: of pandas.DataFrame.apply:80
msgid "**\\*\\*kwds**"
msgstr ""

#: of pandas.DataFrame.apply:79
msgid "Additional keyword arguments to pass as keywords arguments to `func`."
msgstr ""

#: of pandas.DataFrame.apply
msgid "Returns"
msgstr ""

#: of pandas.DataFrame.apply:90
msgid "**applied**"
msgstr ""

#: of pandas.DataFrame.apply:89
msgid "Series or DataFrame"
msgstr ""

#: of pandas.DataFrame.apply:96
msgid ":obj:`DataFrame.applymap`"
msgstr ""

#: of pandas.DataFrame.apply:96
msgid "For elementwise operations."
msgstr ""

#: of pandas.DataFrame.apply:99
msgid ":obj:`DataFrame.aggregate`"
msgstr ""

#: of pandas.DataFrame.apply:99
msgid "Only perform aggregating type operations."
msgstr ""

#: of pandas.DataFrame.apply:101
msgid ":obj:`DataFrame.transform`"
msgstr ""

#: of pandas.DataFrame.apply:102
msgid "Only perform transforming type operations."
msgstr ""

#: of pandas.DataFrame.apply:105
msgid "Notes"
msgstr ""

#: of pandas.DataFrame.apply:106
msgid ""
"In the current implementation apply calls `func` twice on the first "
"column/row to decide whether it can take a fast or slow code path. This "
"can lead to unexpected behavior if `func` has side-effects, as they will "
"take effect twice for the first column/row."
msgstr ""

#: of pandas.DataFrame.apply:114
msgid "Examples"
msgstr ""

#: of pandas.DataFrame.apply:122
msgid ""
"Using a numpy universal function (in this case the same as "
"``np.sqrt(df)``):"
msgstr ""

#: of pandas.DataFrame.apply:131
msgid "Using a reducing function on either axis"
msgstr ""

#: of pandas.DataFrame.apply:144
msgid "Retuning a list-like will result in a Series"
msgstr ""

#: of pandas.DataFrame.apply:152
msgid ""
"Passing result_type='expand' will expand list-like results to columns of "
"a Dataframe"
msgstr ""

#: of pandas.DataFrame.apply:161
msgid ""
"Returning a Series inside the function is similar to passing "
"``result_type='expand'``. The resulting column names will be the Series "
"index."
msgstr ""

#: of pandas.DataFrame.apply:171
msgid ""
"Passing ``result_type='broadcast'`` will ensure the same shape result, "
"whether list-like or scalar is returned by the function, and broadcast it"
" along the axis. The resulting column names will be the originals."
msgstr ""


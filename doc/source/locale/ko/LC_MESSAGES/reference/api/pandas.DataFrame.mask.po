# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../reference/api/pandas.DataFrame.mask.rst:2
msgid "pandas.DataFrame.mask"
msgstr ""

#: of pandas.DataFrame.mask:2
msgid "Replace values where the condition is True."
msgstr ""

#: of pandas.DataFrame.mask
msgid "Parameters"
msgstr ""

#: of pandas.DataFrame.mask:15
msgid "**cond**"
msgstr ""

#: of pandas.DataFrame.mask:14
msgid "boolean NDFrame, array-like, or callable"
msgstr ""

#: of pandas.DataFrame.mask:8
msgid ""
"Where `cond` is False, keep the original value. Where True, replace with "
"corresponding value from `other`. If `cond` is callable, it is computed "
"on the NDFrame and should return boolean NDFrame or array. The callable "
"must not change input NDFrame (though pandas doesn't check it)."
msgstr ""

#: of pandas.DataFrame.mask:14
msgid "A callable can be used as cond."
msgstr ""

#: of pandas.DataFrame.mask:25
msgid "**other**"
msgstr ""

#: of pandas.DataFrame.mask:24
msgid "scalar, NDFrame, or callable"
msgstr ""

#: of pandas.DataFrame.mask:18
msgid ""
"Entries where `cond` is True are replaced with corresponding value from "
"`other`. If other is callable, it is computed on the NDFrame and should "
"return scalar or NDFrame. The callable must not change input NDFrame "
"(though pandas doesn't check it)."
msgstr ""

#: of pandas.DataFrame.mask:24
msgid "A callable can be used as other."
msgstr ""

#: of pandas.DataFrame.mask:28
msgid "**inplace**"
msgstr ""

#: of pandas.DataFrame.mask:27 pandas.DataFrame.mask:43
msgid "boolean, default False"
msgstr ""

#: of pandas.DataFrame.mask:28
msgid "Whether to perform the operation in place on the data."
msgstr ""

#: of pandas.DataFrame.mask:31
msgid "**axis**"
msgstr ""

#: of pandas.DataFrame.mask:30 pandas.DataFrame.mask:33
msgid "int, default None"
msgstr ""

#: of pandas.DataFrame.mask:31
msgid "Alignment axis if needed."
msgstr ""

#: of pandas.DataFrame.mask:34
msgid "**level**"
msgstr ""

#: of pandas.DataFrame.mask:34
msgid "Alignment level if needed."
msgstr ""

#: of pandas.DataFrame.mask:41
msgid "**errors** : str, {'raise', 'ignore'}, default `raise`"
msgstr ""

#: of pandas.DataFrame.mask:40
msgid "str, {'raise', 'ignore'}, default raise"
msgstr ""

#: of pandas.DataFrame.mask:37
msgid ""
"Note that currently this parameter won't affect the results and will "
"always coerce to a suitable dtype."
msgstr ""

#: of pandas.DataFrame.mask:40
msgid "`raise` : allow exceptions to be raised."
msgstr ""

#: of pandas.DataFrame.mask:41
msgid "`ignore` : suppress exceptions. On error return original object."
msgstr ""

#: of pandas.DataFrame.mask:44
msgid "**try_cast**"
msgstr ""

#: of pandas.DataFrame.mask:44
msgid "Try to cast the result back to the input type (if possible)."
msgstr ""

#: of pandas.DataFrame.mask:52
msgid "**raise_on_error**"
msgstr ""

#: of pandas.DataFrame.mask:51
msgid "boolean, default True"
msgstr ""

#: of pandas.DataFrame.mask:47
msgid "Whether to raise on invalid data types (e.g. trying to where on strings)."
msgstr ""

#: of pandas.DataFrame.mask:52
msgid "Use `errors`."
msgstr ""

#: of pandas.DataFrame.mask
msgid "Returns"
msgstr ""

#: of pandas.DataFrame.mask:62
msgid "**wh**"
msgstr ""

#: of pandas.DataFrame.mask:61
msgid "same type as caller"
msgstr ""

#: of pandas.DataFrame.mask:67
msgid ":func:`DataFrame.where`"
msgstr ""

#: of pandas.DataFrame.mask:68
msgid "Return an object of same shape as self."
msgstr ""

#: of pandas.DataFrame.mask:71
msgid "Notes"
msgstr ""

#: of pandas.DataFrame.mask:72
msgid ""
"The mask method is an application of the if-then idiom. For each element "
"in the calling DataFrame, if ``cond`` is ``False`` the element is used; "
"otherwise the corresponding element from the DataFrame ``other`` is used."
msgstr ""

#: of pandas.DataFrame.mask:77
msgid ""
"The signature for :func:`DataFrame.where` differs from "
":func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to "
"``np.where(m, df1, df2)``."
msgstr ""

#: of pandas.DataFrame.mask:81
msgid ""
"For further details and examples see the ``mask`` documentation in "
":ref:`indexing <indexing.where_mask>`."
msgstr ""

#: of pandas.DataFrame.mask:86
msgid "Examples"
msgstr ""


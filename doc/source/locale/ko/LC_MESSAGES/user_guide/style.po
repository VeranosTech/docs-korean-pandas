# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../user_guide/style.ipynb:13
msgid "Styling"
msgstr ""

#: ../../user_guide/style.ipynb:15
msgid "*New in version 0.17.1*"
msgstr ""

#: ../../user_guide/style.ipynb:17
msgid ""
"Provisional: This is a new feature and still under development. We’ll be "
"adding features and possibly making breaking changes in future releases. "
"We’d love to hear your feedback."
msgstr ""

#: ../../user_guide/style.ipynb:19
msgid ""
"This document is written as a Jupyter Notebook, and can be viewed or "
"downloaded `here <http://nbviewer.ipython.org/github/pandas-"
"dev/pandas/blob/master/doc/source/style.ipynb>`__."
msgstr ""

#: ../../user_guide/style.ipynb:21
msgid ""
"You can apply **conditional formatting**, the visual styling of a "
"DataFrame depending on the data within, by using the ``DataFrame.style`` "
"property. This is a property that returns a ``Styler`` object, which has "
"useful methods for formatting and displaying DataFrames."
msgstr ""

#: ../../user_guide/style.ipynb:23
msgid ""
"The styling is accomplished using CSS. You write “style functions” that "
"take scalars, ``DataFrame``\\ s or ``Series``, and return *like-indexed* "
"DataFrames or Series with CSS ``\"attribute: value\"`` pairs for the "
"values. These functions can be incrementally passed to the ``Styler`` "
"which collects the styles before rendering."
msgstr ""

#: ../../user_guide/style.ipynb:31
msgid "Building Styles"
msgstr ""

#: ../../user_guide/style.ipynb:33
msgid "Pass your style functions into one of the following methods:"
msgstr ""

#: ../../user_guide/style.ipynb:35
msgid "``Styler.applymap``: elementwise"
msgstr ""

#: ../../user_guide/style.ipynb:36
msgid "``Styler.apply``: column-/row-/table-wise"
msgstr ""

#: ../../user_guide/style.ipynb:38
msgid ""
"Both of those methods take a function (and some other keyword arguments) "
"and applies your function to the DataFrame in a certain way. "
"``Styler.applymap`` works through the DataFrame elementwise. "
"``Styler.apply`` passes each column or row into your DataFrame one-"
"at-a-time or the entire table at once, depending on the ``axis`` keyword "
"argument. For columnwise use ``axis=0``, rowwise use ``axis=1``, and for "
"the entire table at once use ``axis=None``."
msgstr ""

#: ../../user_guide/style.ipynb:40
msgid ""
"For ``Styler.applymap`` your function should take a scalar and return a "
"single string with the CSS attribute-value pair."
msgstr ""

#: ../../user_guide/style.ipynb:42
msgid ""
"For ``Styler.apply`` your function should take a Series or DataFrame "
"(depending on the axis parameter), and return a Series or DataFrame with "
"an identical shape where each value is a string with a CSS attribute-"
"value pair."
msgstr ""

#: ../../user_guide/style.ipynb:44
msgid "Let’s see some examples."
msgstr ""

#: ../../user_guide/style.ipynb:66
msgid ""
"Here’s a boring example of rendering a DataFrame, without any (visible) "
"styles:"
msgstr ""

#: ../../user_guide/style.ipynb:182
msgid ""
"*Note*: The ``DataFrame.style`` attribute is a property that returns a "
"``Styler`` object. ``Styler`` has a ``_repr_html_`` method defined on it "
"so they are rendered automatically. If you want the actual HTML back for "
"further processing or for writing to file call the ``.render()`` method "
"which returns a string."
msgstr ""

#: ../../user_guide/style.ipynb:184
msgid ""
"The above output looks very similar to the standard DataFrame HTML "
"representation. But we’ve done some work behind the scenes to attach CSS "
"classes to each cell. We can view these by calling the ``.render`` "
"method."
msgstr ""

#: ../../user_guide/style.ipynb:215
msgid ""
"The ``row0_col2`` is the identifier for that particular cell. We’ve also "
"prepended each row/column identifier with a UUID unique to each DataFrame"
" so that the style from one doesn’t collide with the styling from another"
" within the same notebook or page (you can set the ``uuid`` if you’d like"
" to tie together the styling of two DataFrames)."
msgstr ""

#: ../../user_guide/style.ipynb:217
msgid ""
"When writing style functions, you take care of producing the CSS "
"attribute / value pairs you want. Pandas matches those up with the CSS "
"classes that identify each cell."
msgstr ""

#: ../../user_guide/style.ipynb:224
msgid ""
"Let’s write a simple style function that will color negative numbers red "
"and positive numbers black."
msgstr ""

#: ../../user_guide/style.ipynb:246
msgid ""
"In this case, the cell’s style depends only on it’s own value. That means"
" we should use the ``Styler.applymap`` method which works elementwise."
msgstr ""

#: ../../user_guide/style.ipynb:463
msgid ""
"Notice the similarity with the standard ``df.applymap``, which operates "
"on DataFrames elementwise. We want you to be able to reuse your existing "
"knowledge of how to interact with DataFrames."
msgstr ""

#: ../../user_guide/style.ipynb:465
msgid ""
"Notice also that our function returned a string containing the CSS "
"attribute and value, separated by a colon just like in a ``<style>`` tag."
" This will be a common theme."
msgstr ""

#: ../../user_guide/style.ipynb:467
msgid ""
"Finally, the input shapes matched. ``Styler.applymap`` calls the function"
" on each scalar input, and the function returns a scalar output."
msgstr ""

#: ../../user_guide/style.ipynb:474
msgid ""
"Now suppose you wanted to highlight the maximum value in each column. We "
"can’t use ``.applymap`` anymore since that operated elementwise. Instead,"
" we’ll turn to ``.apply`` which operates columnwise (or rowwise using the"
" ``axis`` keyword). Later on we’ll see that something like "
"``highlight_max`` is already defined on ``Styler`` so you wouldn’t need "
"to write this yourself."
msgstr ""

#: ../../user_guide/style.ipynb:613
msgid ""
"In this case the input is a ``Series``, one column at a time. Notice that"
" the output shape of ``highlight_max`` matches the input shape, an array "
"with ``len(s)`` items."
msgstr ""

#: ../../user_guide/style.ipynb:620
msgid ""
"We encourage you to use method chains to build up a style piecewise, "
"before finally rending at the end of the chain."
msgstr ""

#: ../../user_guide/style.ipynb:888
msgid "Above we used ``Styler.apply`` to pass in each column one at a time."
msgstr ""

#: ../../user_guide/style.ipynb:890
msgid ""
"Debugging Tip: If you’re having trouble writing your style function, try "
"just passing it into DataFrame.apply. Internally, Styler.apply uses "
"DataFrame.apply so the result should be the same."
msgstr ""

#: ../../user_guide/style.ipynb:892
msgid ""
"What if you wanted to highlight just the maximum value in the entire "
"table? Use ``.apply(function, axis=None)`` to indicate that your function"
" wants the entire table, not one column or row at a time. Let’s try that "
"next."
msgstr ""

#: ../../user_guide/style.ipynb:894
msgid ""
"We’ll rewrite our ``highlight-max`` to handle either Series (from "
"``.apply(axis=0 or 1)``) or DataFrames (from ``.apply(axis=None)``). "
"We’ll also allow the color to be adjustable, to demonstrate that "
"``.apply``, and ``.applymap`` pass along keyword arguments."
msgstr ""

#: ../../user_guide/style.ipynb:920
msgid ""
"When using ``Styler.apply(func, axis=None)``, the function must return a "
"DataFrame with the same index and column labels."
msgstr ""

#: ../../user_guide/style.ipynb:1039
msgid "Building Styles Summary"
msgstr ""

#: ../../user_guide/style.ipynb:1041
msgid ""
"Style functions should return strings with one or more CSS ``attribute: "
"value`` delimited by semicolons. Use"
msgstr ""

#: ../../user_guide/style.ipynb:1043
msgid "``Styler.applymap(func)`` for elementwise styles"
msgstr ""

#: ../../user_guide/style.ipynb:1044
msgid "``Styler.apply(func, axis=0)`` for columnwise styles"
msgstr ""

#: ../../user_guide/style.ipynb:1045
msgid "``Styler.apply(func, axis=1)`` for rowwise styles"
msgstr ""

#: ../../user_guide/style.ipynb:1046
msgid "``Styler.apply(func, axis=None)`` for tablewise styles"
msgstr ""

#: ../../user_guide/style.ipynb:1048
msgid ""
"And crucially the input and output shapes of ``func`` must match. If "
"``x`` is the input then ``func(x).shape == x.shape``."
msgstr ""

#: ../../user_guide/style.ipynb:1056
msgid "Finer Control: Slicing"
msgstr ""

#: ../../user_guide/style.ipynb:1063
msgid ""
"Both ``Styler.apply``, and ``Styler.applymap`` accept a ``subset`` "
"keyword. This allows you to apply styles to specific rows or columns, "
"without having to code that logic into your ``style`` function."
msgstr ""

#: ../../user_guide/style.ipynb:1065
msgid "The value passed to ``subset`` behaves similar to slicing a DataFrame."
msgstr ""

#: ../../user_guide/style.ipynb:1067
msgid "A scalar is treated as a column label"
msgstr ""

#: ../../user_guide/style.ipynb:1068
msgid "A list (or series or numpy array)"
msgstr ""

#: ../../user_guide/style.ipynb:1069
msgid "A tuple is treated as ``(row_indexer, column_indexer)``"
msgstr ""

#: ../../user_guide/style.ipynb:1071
msgid "Consider using ``pd.IndexSlice`` to construct the tuple for the last one."
msgstr ""

#: ../../user_guide/style.ipynb:1193
msgid "For row and column slicing, any valid indexer to ``.loc`` will work."
msgstr ""

#: ../../user_guide/style.ipynb:1326
msgid "Only label-based slicing is supported right now, not positional."
msgstr ""

#: ../../user_guide/style.ipynb:1328
msgid ""
"If your style function uses a ``subset`` or ``axis`` keyword argument, "
"consider wrapping your function in a ``functools.partial``, partialing "
"out that keyword."
msgstr ""

#: ../../user_guide/style.ipynb:1340
msgid "Finer Control: Display Values"
msgstr ""

#: ../../user_guide/style.ipynb:1342
msgid ""
"We distinguish the *display* value from the *actual* value in ``Styler``."
" To control the display value, the text is printed in each cell, use "
"``Styler.format``. Cells can be formatted according to a `format spec "
"string <https://docs.python.org/3/library/string.html#format-"
"specification-mini-language>`__ or a callable that takes a single value "
"and returns a string."
msgstr ""

#: ../../user_guide/style.ipynb:1458
msgid "Use a dictionary to format specific columns."
msgstr ""

#: ../../user_guide/style.ipynb:1574
msgid ""
"Or pass in a callable (or dictionary of callables) for more flexible "
"handling."
msgstr ""

#: ../../user_guide/style.ipynb:1691
msgid "Builtin Styles"
msgstr ""

#: ../../user_guide/style.ipynb:1698
msgid ""
"Finally, we expect certain styling functions to be common enough that "
"we’ve included a few “built-in” to the ``Styler``, so you don’t have to "
"write them yourself."
msgstr ""

#: ../../user_guide/style.ipynb:1816
msgid ""
"You can create “heatmaps” with the ``background_gradient`` method. These "
"require matplotlib, and we’ll use `Seaborn "
"<http://stanford.edu/~mwaskom/software/seaborn/>`__ to get a nice "
"colormap."
msgstr ""

#: ../../user_guide/style.ipynb:2087
msgid ""
"``Styler.background_gradient`` takes the keyword arguments ``low`` and "
"``high``. Roughly speaking these extend the range of your data by ``low``"
" and ``high`` percent so that when we convert the colors, the colormap’s "
"entire range isn’t used. This is useful so that you can actually read the"
" text still."
msgstr ""

#: ../../user_guide/style.ipynb:2412
msgid "There’s also ``.highlight_min`` and ``.highlight_max``."
msgstr ""

#: ../../user_guide/style.ipynb:2538
msgid ""
"Use ``Styler.set_properties`` when the style doesn’t actually depend on "
"the values."
msgstr ""

#: ../../user_guide/style.ipynb:2857
msgid "Bar charts"
msgstr ""

#: ../../user_guide/style.ipynb:2864
msgid "You can include “bar charts” in your DataFrame."
msgstr ""

#: ../../user_guide/style.ipynb:3058
msgid ""
"New in version 0.20.0 is the ability to customize further the bar chart: "
"You can now have the ``df.style.bar`` be centered on zero or midpoint "
"value (in addition to the already existing way of having the min value at"
" the left side of the cell), and you can pass a list of "
"``[color_negative, color_positive]``."
msgstr ""

#: ../../user_guide/style.ipynb:3060
msgid "Here’s how you can change the above with the new ``align='mid'`` option:"
msgstr ""

#: ../../user_guide/style.ipynb:3256
msgid ""
"The following example aims to give a highlight of the behavior of the new"
" align options:"
msgstr ""

#: ../../user_guide/style.ipynb:3641
msgid "Sharing Styles"
msgstr ""

#: ../../user_guide/style.ipynb:3648
msgid ""
"Say you have a lovely style built up for a DataFrame, and now you want to"
" apply the same style to a second DataFrame. Export the style with "
"``df1.style.export``, and import it on the second DataFrame with "
"``df1.style.set``"
msgstr ""

#: ../../user_guide/style.ipynb:4077
msgid ""
"Notice that you’re able share the styles even though they’re data aware. "
"The styles are re-evaluated on the new DataFrame they’ve been ``use``\\ d"
" upon."
msgstr ""

#: ../../user_guide/style.ipynb:4085
msgid "Other Options"
msgstr ""

#: ../../user_guide/style.ipynb:4087
msgid ""
"You’ve seen a few methods for data-driven styling. ``Styler`` also "
"provides a few other options for styles that don’t depend on the data."
msgstr ""

#: ../../user_guide/style.ipynb:4089
msgid "precision"
msgstr ""

#: ../../user_guide/style.ipynb:4090
msgid "captions"
msgstr ""

#: ../../user_guide/style.ipynb:4091
msgid "table-wide styles"
msgstr ""

#: ../../user_guide/style.ipynb:4092
msgid "hiding the index or columns"
msgstr ""

#: ../../user_guide/style.ipynb:4094
msgid "Each of these can be specified in two ways:"
msgstr ""

#: ../../user_guide/style.ipynb:4096
msgid "A keyword argument to ``Styler.__init__``"
msgstr ""

#: ../../user_guide/style.ipynb:4097
msgid ""
"A call to one of the ``.set_`` or ``.hide_`` methods, e.g. "
"``.set_caption`` or ``.hide_columns``"
msgstr ""

#: ../../user_guide/style.ipynb:4099
msgid ""
"The best method to use depends on the context. Use the ``Styler`` "
"constructor when building many styled DataFrames that should all share "
"the same properties. For interactive use, the\\ ``.set_`` and ``.hide_`` "
"methods are more convenient."
msgstr ""

#: ../../user_guide/style.ipynb:4107
msgid "Precision"
msgstr ""

#: ../../user_guide/style.ipynb:4114
msgid ""
"You can control the precision of floats using pandas’ regular "
"``display.precision`` option."
msgstr ""

#: ../../user_guide/style.ipynb:4384
msgid "Or through a ``set_precision`` method."
msgstr ""

#: ../../user_guide/style.ipynb:4653
msgid ""
"Setting the precision only affects the printed number; the full-precision"
" values are always passed to your style functions. You can always use "
"``df.round(2).style`` if you’d prefer to round from the start."
msgstr ""

#: ../../user_guide/style.ipynb:4661
msgid "Captions"
msgstr ""

#: ../../user_guide/style.ipynb:4668
msgid "Regular table captions can be added in a few ways."
msgstr ""

#: ../../user_guide/style.ipynb:4936
msgid "Table Styles"
msgstr ""

#: ../../user_guide/style.ipynb:4943
msgid ""
"The next option you have are “table styles”. These are styles that apply "
"to the table as a whole, but don’t look at the data. Certain sytlings, "
"including pseudo-selectors like ``:hover`` can only be used this way."
msgstr ""

#: ../../user_guide/style.ipynb:5080
msgid ""
"``table_styles`` should be a list of dictionaries. Each dictionary should"
" have the ``selector`` and ``props`` keys. The value for ``selector`` "
"should be a valid CSS selector. Recall that all the styles are already "
"attached to an ``id``, unique to each ``Styler``. This selector is in "
"addition to that ``id``. The value for ``props`` should be a list of "
"tuples of ``('attribute', 'value')``."
msgstr ""

#: ../../user_guide/style.ipynb:5082
msgid ""
"``table_styles`` are extremely flexible, but not as fun to type out by "
"hand. We hope to collect some useful ones either in pandas, or preferable"
" in a new package that `builds on top <#Extensibility>`__ the tools here."
msgstr ""

#: ../../user_guide/style.ipynb:5090
msgid "Hiding the Index or Columns"
msgstr ""

#: ../../user_guide/style.ipynb:5097
msgid ""
"The index can be hidden from rendering by calling ``Styler.hide_index``. "
"Columns can be hidden from rendering by calling ``Styler.hide_columns`` "
"and passing in the name of a column, or a slice of columns."
msgstr ""

#: ../../user_guide/style.ipynb:5293
msgid "CSS Classes"
msgstr ""

#: ../../user_guide/style.ipynb:5295
msgid "Certain CSS classes are attached to cells."
msgstr ""

#: ../../user_guide/style.ipynb:5297
msgid ""
"Index and Column names include ``index_name`` and ``level<k>`` where "
"``k`` is its level in a MultiIndex"
msgstr ""

#: ../../user_guide/style.ipynb:5298
msgid "Index label cells include"
msgstr ""

#: ../../user_guide/style.ipynb:5300
msgid "``row_heading``"
msgstr ""

#: ../../user_guide/style.ipynb:5301
msgid "``row<n>`` where ``n`` is the numeric position of the row"
msgstr ""

#: ../../user_guide/style.ipynb:5302 ../../user_guide/style.ipynb:5308
msgid "``level<k>`` where ``k`` is the level in a MultiIndex"
msgstr ""

#: ../../user_guide/style.ipynb:5304
msgid "Column label cells include"
msgstr ""

#: ../../user_guide/style.ipynb:5306
msgid "``col_heading``"
msgstr ""

#: ../../user_guide/style.ipynb:5307
msgid "``col<n>`` where ``n`` is the numeric position of the column"
msgstr ""

#: ../../user_guide/style.ipynb:5310
msgid "Blank cells include ``blank``"
msgstr ""

#: ../../user_guide/style.ipynb:5311
msgid "Data cells include ``data``"
msgstr ""

#: ../../user_guide/style.ipynb:5319
msgid "Limitations"
msgstr ""

#: ../../user_guide/style.ipynb:5321
msgid "DataFrame only ``(use Series.to_frame().style)``"
msgstr ""

#: ../../user_guide/style.ipynb:5322
msgid "The index and columns must be unique"
msgstr ""

#: ../../user_guide/style.ipynb:5323
msgid ""
"No large repr, and performance isn’t great; this is intended for summary "
"DataFrames"
msgstr ""

#: ../../user_guide/style.ipynb:5324
msgid "You can only style the *values*, not the index or columns"
msgstr ""

#: ../../user_guide/style.ipynb:5325
msgid "You can only apply styles, you can’t insert new HTML entities"
msgstr ""

#: ../../user_guide/style.ipynb:5327
msgid "Some of these will be addressed in the future."
msgstr ""

#: ../../user_guide/style.ipynb:5335
msgid "Terms"
msgstr ""

#: ../../user_guide/style.ipynb:5337
msgid ""
"Style function: a function that’s passed into ``Styler.apply`` or "
"``Styler.applymap`` and returns values like ``'css attribute: value'``"
msgstr ""

#: ../../user_guide/style.ipynb:5338
msgid "Builtin style functions: style functions that are methods on ``Styler``"
msgstr ""

#: ../../user_guide/style.ipynb:5339
msgid ""
"table style: a dictionary with the two keys ``selector`` and ``props``. "
"``selector`` is the CSS selector that ``props`` will apply to. ``props`` "
"is a list of ``(attribute, value)`` tuples. A list of table styles passed"
" into ``Styler``."
msgstr ""

#: ../../user_guide/style.ipynb:5347
msgid "Fun stuff"
msgstr ""

#: ../../user_guide/style.ipynb:5349
msgid "Here are a few interesting examples."
msgstr ""

#: ../../user_guide/style.ipynb:5351
msgid ""
"``Styler`` interacts pretty well with widgets. If you’re viewing this "
"online instead of running the notebook yourself, you’re missing out on "
"interactively adjusting the color palette."
msgstr ""

#: ../../user_guide/style.ipynb:8746
msgid "Export to Excel"
msgstr ""

#: ../../user_guide/style.ipynb:8748
msgid "*New in version 0.20.0*"
msgstr ""

#: ../../user_guide/style.ipynb:8750
msgid ""
"Experimental: This is a new feature and still under development. We’ll be"
" adding features and possibly making breaking changes in future releases."
" We’d love to hear your feedback."
msgstr ""

#: ../../user_guide/style.ipynb:8752
msgid ""
"Some support is available for exporting styled ``DataFrames`` to Excel "
"worksheets using the ``OpenPyXL`` or ``XlsxWriter`` engines. CSS2.2 "
"properties handled include:"
msgstr ""

#: ../../user_guide/style.ipynb:8754
msgid "``background-color``"
msgstr ""

#: ../../user_guide/style.ipynb:8755
msgid ""
"``border-style``, ``border-width``, ``border-color`` and their {``top``, "
"``right``, ``bottom``, ``left`` variants}"
msgstr ""

#: ../../user_guide/style.ipynb:8756
msgid "``color``"
msgstr ""

#: ../../user_guide/style.ipynb:8757
msgid "``font-family``"
msgstr ""

#: ../../user_guide/style.ipynb:8758
msgid "``font-style``"
msgstr ""

#: ../../user_guide/style.ipynb:8759
msgid "``font-weight``"
msgstr ""

#: ../../user_guide/style.ipynb:8760
msgid "``text-align``"
msgstr ""

#: ../../user_guide/style.ipynb:8761
msgid "``text-decoration``"
msgstr ""

#: ../../user_guide/style.ipynb:8762
msgid "``vertical-align``"
msgstr ""

#: ../../user_guide/style.ipynb:8763
msgid "``white-space: nowrap``"
msgstr ""

#: ../../user_guide/style.ipynb:8765
msgid ""
"Only CSS2 named colors and hex colors of the form ``#rgb`` or ``#rrggbb``"
" are currently supported."
msgstr ""

#: ../../user_guide/style.ipynb:8766
msgid ""
"The following pseudo CSS properties are also available to set excel "
"specific style properties:"
msgstr ""

#: ../../user_guide/style.ipynb:8768
msgid "``number-format``"
msgstr ""

#: ../../user_guide/style.ipynb:8786
msgid "A screenshot of the output:"
msgstr ""

#: ../../user_guide/style.ipynb:8788
msgid "|Excel spreadsheet with styled DataFrame|"
msgstr ""

#: ../../user_guide/style.ipynb:8798
msgid "Extensibility"
msgstr ""

#: ../../user_guide/style.ipynb:8800
msgid ""
"The core of pandas is, and will remain, its “high-performance, easy-to-"
"use data structures”. With that in mind, we hope that ``DataFrame.style``"
" accomplishes two goals"
msgstr ""

#: ../../user_guide/style.ipynb:8802
msgid ""
"Provide an API that is pleasing to use interactively and is “good enough”"
" for many tasks"
msgstr ""

#: ../../user_guide/style.ipynb:8803
msgid "Provide the foundations for dedicated libraries to build on"
msgstr ""

#: ../../user_guide/style.ipynb:8805
msgid ""
"If you build a great library on top of this, let us know and we’ll `link "
"<http://pandas.pydata.org/pandas-docs/stable/ecosystem.html>`__ to it."
msgstr ""

#: ../../user_guide/style.ipynb:8808
msgid "Subclassing"
msgstr ""

#: ../../user_guide/style.ipynb:8810
msgid ""
"If the default template doesn’t quite suit your needs, you can subclass "
"Styler and extend or override the template. We’ll show an example of "
"extending the default template to insert a custom header before each "
"table."
msgstr ""

#: ../../user_guide/style.ipynb:8827
msgid "We’ll use the following template:"
msgstr ""

#: ../../user_guide/style.ipynb:8885
msgid ""
"Now that we’ve created a template, we need to set up a subclass of "
"``Styler`` that knows about it."
msgstr ""

#: ../../user_guide/style.ipynb:8907
msgid ""
"Notice that we include the original loader in our environment’s loader. "
"That’s because we extend the original template, so the Jinja environment "
"needs to be able to find it."
msgstr ""

#: ../../user_guide/style.ipynb:8909
msgid "Now we can use that custom styler. It’s ``__init__`` takes a DataFrame."
msgstr ""

#: ../../user_guide/style.ipynb:9198
msgid ""
"Our custom template accepts a ``table_title`` keyword. We can provide the"
" value in the ``.render`` method."
msgstr ""

#: ../../user_guide/style.ipynb:9487
msgid ""
"For convenience, we provide the ``Styler.from_custom_template`` method "
"that does the same as the custom subclass."
msgstr ""

#: ../../user_guide/style.ipynb:9777
msgid "Here’s the template structure:"
msgstr ""

#: ../../user_guide/style.ipynb:9871
msgid ""
"See the template in the `GitHub repo <https://github.com/pandas-"
"dev/pandas>`__ for more details."
msgstr ""


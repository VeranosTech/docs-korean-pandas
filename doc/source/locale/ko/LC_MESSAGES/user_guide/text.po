# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../user_guide/text.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../user_guide/text.rst:7
msgid "Working with Text Data"
msgstr ""

#: ../../user_guide/text.rst:11
msgid ""
"Series and Index are equipped with a set of string processing methods "
"that make it easy to operate on each element of the array. Perhaps most "
"importantly, these methods exclude missing/NA values automatically. These"
" are accessed via the ``str`` attribute and generally have names matching"
" the equivalent (scalar) built-in string methods:"
msgstr ""

#: ../../user_guide/text.rst:31
msgid ""
"The string methods on Index are especially useful for cleaning up or "
"transforming DataFrame columns. For instance, you may have columns with "
"leading or trailing whitespace:"
msgstr ""

#: ../../user_guide/text.rst:41
msgid "Since ``df.columns`` is an Index object, we can use the ``.str`` accessor"
msgstr ""

#: ../../user_guide/text.rst:48
msgid ""
"These string methods can then be used to clean up the columns as needed. "
"Here we are removing leading and trailing whitespaces, lower casing all "
"names, and replacing any remaining whitespaces with underscores:"
msgstr ""

#: ../../user_guide/text.rst:59
msgid ""
"If you have a ``Series`` where lots of elements are repeated (i.e. the "
"number of unique elements in the ``Series`` is a lot smaller than the "
"length of the ``Series``), it can be faster to convert the original "
"``Series`` to one of type ``category`` and then use ``.str.<method>`` or "
"``.dt.<property>`` on that. The performance difference comes from the "
"fact that, for ``Series`` of type ``category``, the string operations are"
" done on the ``.categories`` and not on each element of the ``Series``."
msgstr ""

#: ../../user_guide/text.rst:67
msgid ""
"Please note that a ``Series`` of type ``category`` with string "
"``.categories`` has some limitations in comparison to ``Series`` of type "
"string (e.g. you can't add strings to each other: ``s + \" \" + s`` won't"
" work if ``s`` is a ``Series`` of type ``category``). Also, ``.str`` "
"methods which operate on elements of type ``list`` are not available on "
"such a ``Series``."
msgstr ""

#: ../../user_guide/text.rst:75
msgid "Splitting and Replacing Strings"
msgstr ""

#: ../../user_guide/text.rst:79
msgid "Methods like ``split`` return a Series of lists:"
msgstr ""

#: ../../user_guide/text.rst:86
msgid ""
"Elements in the split lists can be accessed using ``get`` or ``[]`` "
"notation:"
msgstr ""

#: ../../user_guide/text.rst:93
msgid "It is easy to expand this to return a DataFrame using ``expand``."
msgstr ""

#: ../../user_guide/text.rst:99
msgid "It is also possible to limit the number of splits:"
msgstr ""

#: ../../user_guide/text.rst:105
msgid ""
"``rsplit`` is similar to ``split`` except it works in the reverse "
"direction, i.e., from the end of the string to the beginning of the "
"string:"
msgstr ""

#: ../../user_guide/text.rst:112
msgid ""
"``replace`` by default replaces `regular expressions "
"<https://docs.python.org/3/library/re.html>`__:"
msgstr ""

#: ../../user_guide/text.rst:122
msgid ""
"Some caution must be taken to keep regular expressions in mind! For "
"example, the following code will cause trouble because of the regular "
"expression meaning of `$`:"
msgstr ""

#: ../../user_guide/text.rst:142
msgid ""
"If you do want literal replacement of a string (equivalent to "
":meth:`str.replace`), you can set the optional ``regex`` parameter to "
"``False``, rather than escaping each character. In this case both ``pat``"
" and ``repl`` must be strings:"
msgstr ""

#: ../../user_guide/text.rst:155
msgid ""
"The ``replace`` method can also take a callable as replacement. It is "
"called on every ``pat`` using :func:`re.sub`. The callable should expect "
"one positional argument (a regex object) and return a string."
msgstr ""

#: ../../user_guide/text.rst:179
msgid ""
"The ``replace`` method also accepts a compiled regular expression object "
"from :func:`re.compile` as a pattern. All flags should be included in the"
" compiled regular expression object."
msgstr ""

#: ../../user_guide/text.rst:189
msgid ""
"Including a ``flags`` argument when calling ``replace`` with a compiled "
"regular expression object will raise a ``ValueError``."
msgstr ""

#: ../../user_guide/text.rst:202
msgid "Concatenation"
msgstr ""

#: ../../user_guide/text.rst:204
msgid ""
"There are several ways to concatenate a ``Series`` or ``Index``, either "
"with itself or others, all based on :meth:`~Series.str.cat`, resp. "
"``Index.str.cat``."
msgstr ""

#: ../../user_guide/text.rst:208
msgid "Concatenating a single Series into a string"
msgstr ""

#: ../../user_guide/text.rst:210
msgid "The content of a ``Series`` (or ``Index``) can be concatenated:"
msgstr ""

#: ../../user_guide/text.rst:217
msgid ""
"If not specified, the keyword ``sep`` for the separator defaults to the "
"empty string, ``sep=''``:"
msgstr ""

#: ../../user_guide/text.rst:223
msgid ""
"By default, missing values are ignored. Using ``na_rep``, they can be "
"given a representation:"
msgstr ""

#: ../../user_guide/text.rst:232
msgid "Concatenating a Series and something list-like into a Series"
msgstr ""

#: ../../user_guide/text.rst:234
msgid ""
"The first argument to :meth:`~Series.str.cat` can be a list-like object, "
"provided that it matches the length of the calling ``Series`` (or "
"``Index``)."
msgstr ""

#: ../../user_guide/text.rst:240
msgid ""
"Missing values on either side will result in missing values in the result"
" as well, *unless* ``na_rep`` is specified:"
msgstr ""

#: ../../user_guide/text.rst:248
msgid "Concatenating a Series and something array-like into a Series"
msgstr ""

#: ../../user_guide/text.rst:252
msgid ""
"The parameter ``others`` can also be two-dimensional. In this case, the "
"number or rows must match the lengths of the calling ``Series`` (or "
"``Index``)."
msgstr ""

#: ../../user_guide/text.rst:262
msgid "Concatenating a Series and an indexed object into a Series, with alignment"
msgstr ""

#: ../../user_guide/text.rst:266
msgid ""
"For concatenation with a ``Series`` or ``DataFrame``, it is possible to "
"align the indexes before concatenation by setting the ``join``-keyword."
msgstr ""

#: ../../user_guide/text.rst:280
msgid ""
"If the ``join`` keyword is not passed, the method :meth:`~Series.str.cat`"
" will currently fall back to the behavior before version 0.23.0 (i.e. no "
"alignment), but a ``FutureWarning`` will be raised if any of the involved"
" indexes differ, since this default will change to ``join='left'`` in a "
"future version."
msgstr ""

#: ../../user_guide/text.rst:283
msgid ""
"The usual options are available for ``join`` (one of ``'left', 'outer', "
"'inner', 'right'``). In particular, alignment also means that the "
"different lengths do not need to coincide anymore."
msgstr ""

#: ../../user_guide/text.rst:294
msgid "The same alignment can be used when ``others`` is a ``DataFrame``:"
msgstr ""

#: ../../user_guide/text.rst:304
msgid "Concatenating a Series and many objects into a Series"
msgstr ""

#: ../../user_guide/text.rst:306
msgid ""
"Several array-like items (specifically: ``Series``, ``Index``, and "
"1-dimensional variants of ``np.ndarray``) can be combined in a list-like "
"container (including iterators, ``dict``-views, etc.)."
msgstr ""

#: ../../user_guide/text.rst:315
msgid ""
"All elements without an index (e.g. ``np.ndarray``) within the passed "
"list-like must match in length to the calling ``Series`` (or ``Index``), "
"but ``Series`` and ``Index`` may have arbitrary length (as long as "
"alignment is not disabled with ``join=None``):"
msgstr ""

#: ../../user_guide/text.rst:323
msgid ""
"If using ``join='right'`` on a list-like of ``others`` that contains "
"different indexes, the union of these indexes will be used as the basis "
"for the final concatenation:"
msgstr ""

#: ../../user_guide/text.rst:333
msgid "Indexing with ``.str``"
msgstr ""

#: ../../user_guide/text.rst:337
msgid ""
"You can use ``[]`` notation to directly index by position locations. If "
"you index past the end of the string, the result will be a ``NaN``."
msgstr ""

#: ../../user_guide/text.rst:350
msgid "Extracting Substrings"
msgstr ""

#: ../../user_guide/text.rst:355
msgid "Extract first match in each subject (extract)"
msgstr ""

#: ../../user_guide/text.rst:359
msgid ""
"In version 0.18.0, ``extract`` gained the ``expand`` argument. When "
"``expand=False`` it returns a ``Series``, ``Index``, or ``DataFrame``, "
"depending on the subject and regular expression pattern (same behavior as"
" pre-0.18.0). When ``expand=True`` it always returns a ``DataFrame``, "
"which is more consistent and less confusing from the perspective of a "
"user. ``expand=True`` is the default since version 0.23.0."
msgstr ""

#: ../../user_guide/text.rst:367
msgid ""
"The ``extract`` method accepts a `regular expression "
"<https://docs.python.org/3/library/re.html>`__ with at least one capture "
"group."
msgstr ""

#: ../../user_guide/text.rst:371
msgid ""
"Extracting a regular expression with more than one group returns a "
"DataFrame with one column per group."
msgstr ""

#: ../../user_guide/text.rst:378
msgid ""
"Elements that do not match return a row filled with ``NaN``. Thus, a "
"Series of messy strings can be \"converted\" into a like-indexed Series "
"or DataFrame of cleaned-up or more useful strings, without necessitating "
"``get()`` to access tuples or ``re.match`` objects. The dtype of the "
"result is always object, even if no match is found and the result only "
"contains ``NaN``."
msgstr ""

#: ../../user_guide/text.rst:385
msgid "Named groups like"
msgstr ""

#: ../../user_guide/text.rst:392
msgid "and optional groups like"
msgstr ""

#: ../../user_guide/text.rst:398
msgid ""
"can also be used. Note that any capture group names in the regular "
"expression will be used for column names; otherwise capture group numbers"
" will be used."
msgstr ""

#: ../../user_guide/text.rst:402
msgid ""
"Extracting a regular expression with one group returns a ``DataFrame`` "
"with one column if ``expand=True``."
msgstr ""

#: ../../user_guide/text.rst:409
msgid "It returns a Series if ``expand=False``."
msgstr ""

#: ../../user_guide/text.rst:415
msgid ""
"Calling on an ``Index`` with a regex with exactly one capture group "
"returns a ``DataFrame`` with one column if ``expand=True``."
msgstr ""

#: ../../user_guide/text.rst:424
msgid "It returns an ``Index`` if ``expand=False``."
msgstr ""

#: ../../user_guide/text.rst:430
msgid ""
"Calling on an ``Index`` with a regex with more than one capture group "
"returns a ``DataFrame`` if ``expand=True``."
msgstr ""

#: ../../user_guide/text.rst:437
msgid "It raises ``ValueError`` if ``expand=False``."
msgstr ""

#: ../../user_guide/text.rst:444
msgid ""
"The table below summarizes the behavior of ``extract(expand=False)`` "
"(input subject in first column, number of groups in regex in first row)"
msgstr ""

#: ../../user_guide/text.rst:449
msgid "1 group"
msgstr ""

#: ../../user_guide/text.rst:449
msgid ">1 group"
msgstr ""

#: ../../user_guide/text.rst:451
msgid "Index"
msgstr ""

#: ../../user_guide/text.rst:451
msgid "ValueError"
msgstr ""

#: ../../user_guide/text.rst:453
msgid "Series"
msgstr ""

#: ../../user_guide/text.rst:453
msgid "DataFrame"
msgstr ""

#: ../../user_guide/text.rst:457
msgid "Extract all matches in each subject (extractall)"
msgstr ""

#: ../../user_guide/text.rst:463
msgid "Unlike ``extract`` (which returns only the first match),"
msgstr ""

#: ../../user_guide/text.rst:472
msgid ""
"the ``extractall`` method returns every match. The result of "
"``extractall`` is always a ``DataFrame`` with a ``MultiIndex`` on its "
"rows. The last level of the ``MultiIndex`` is named ``match`` and "
"indicates the order in the subject."
msgstr ""

#: ../../user_guide/text.rst:481
msgid "When each subject string in the Series has exactly one match,"
msgstr ""

#: ../../user_guide/text.rst:488
msgid ""
"then ``extractall(pat).xs(0, level='match')`` gives the same result as "
"``extract(pat)``."
msgstr ""

#: ../../user_guide/text.rst:499
msgid ""
"``Index`` also supports ``.str.extractall``. It returns a ``DataFrame`` "
"which has the same result as a ``Series.str.extractall`` with a default "
"index (starts from 0)."
msgstr ""

#: ../../user_guide/text.rst:512
msgid "Testing for Strings that Match or Contain a Pattern"
msgstr ""

#: ../../user_guide/text.rst:514
msgid "You can check whether elements contain a pattern:"
msgstr ""

#: ../../user_guide/text.rst:521
msgid "Or whether elements match a pattern:"
msgstr ""

#: ../../user_guide/text.rst:527
msgid ""
"The distinction between ``match`` and ``contains`` is strictness: "
"``match`` relies on strict ``re.match``, while ``contains`` relies on "
"``re.search``."
msgstr ""

#: ../../user_guide/text.rst:530
msgid ""
"Methods like ``match``, ``contains``, ``startswith``, and ``endswith`` "
"take an extra ``na`` argument so missing values can be considered True or"
" False:"
msgstr ""

#: ../../user_guide/text.rst:541
msgid "Creating Indicator Variables"
msgstr ""

#: ../../user_guide/text.rst:543
msgid ""
"You can extract dummy variables from string columns. For example if they "
"are separated by a ``'|'``:"
msgstr ""

#: ../../user_guide/text.rst:551
msgid ""
"String ``Index`` also supports ``get_dummies`` which returns a "
"``MultiIndex``."
msgstr ""

#: ../../user_guide/text.rst:560
msgid "See also :func:`~pandas.get_dummies`."
msgstr ""

#: ../../user_guide/text.rst:563
msgid "Method Summary"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Method"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Description"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.cat`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Concatenate strings"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.split`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Split strings on delimiter"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rsplit`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Split strings on delimiter working from the end of the string"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.get`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Index into each element (retrieve i-th element)"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.join`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Join strings in each element of the Series with passed separator"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.get_dummies`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Split strings on the delimiter returning DataFrame of dummy variables"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.contains`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Return boolean array if each string contains pattern/regex"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.replace`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ""
"Replace occurrences of pattern/regex/string with some other string or the"
" return value of a callable given the occurrence"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.repeat`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Duplicate values (``s.str.repeat(3)`` equivalent to ``x * 3``)"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.pad`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Add whitespace to left, right, or both sides of strings"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.center`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.center``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.ljust`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.ljust``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rjust`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.rjust``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.zfill`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.zfill``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.wrap`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Split long strings into lines with length less than a given width"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.slice`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Slice each string in the Series"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.slice_replace`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Replace slice in each string with passed value"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.count`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Count occurrences of pattern"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.startswith`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.startswith(pat)`` for each element"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.endswith`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.endswith(pat)`` for each element"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.findall`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Compute list of all occurrences of pattern/regex for each string"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.match`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Call ``re.match`` on each element, returning matched groups as list"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.extract`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ""
"Call ``re.search`` on each element, returning DataFrame with one row for "
"each element and one column for each regex capture group"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.extractall`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ""
"Call ``re.findall`` on each element, returning DataFrame with one row for"
" each match and one column for each regex capture group"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.len`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Compute string lengths"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.strip`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.strip``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rstrip`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.rstrip``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.lstrip`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.lstrip``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.partition`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.partition``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rpartition`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.rpartition``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.lower`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.lower``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.casefold`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.casefold``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.upper`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.upper``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.find`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.find``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rfind`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.rfind``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.index`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.index``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.rindex`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.rindex``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.capitalize`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.capitalize``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.swapcase`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.swapcase``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.normalize`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Return Unicode normal form. Equivalent to ``unicodedata.normalize``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.translate`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.translate``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isalnum`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isalnum``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isalpha`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isalpha``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isdigit`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isdigit``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isspace`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isspace``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.islower`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.islower``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isupper`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isupper``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.istitle`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.istitle``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isnumeric`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isnumeric``"
msgstr ""

#: ../../user_guide/text.rst:1
msgid ":meth:`~Series.str.isdecimal`"
msgstr ""

#: ../../user_guide/text.rst:1
msgid "Equivalent to ``str.isdecimal``"
msgstr ""


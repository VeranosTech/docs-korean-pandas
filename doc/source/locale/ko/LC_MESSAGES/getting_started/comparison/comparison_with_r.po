# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../getting_started/comparison/comparison_with_r.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:6
msgid "Comparison with R / R libraries"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:8
msgid ""
"Since ``pandas`` aims to provide a lot of the data manipulation and "
"analysis functionality that people use `R <http://www.r-project.org/>`__ "
"for, this page was started to provide a more detailed look at the `R "
"language <http://en.wikipedia.org/wiki/R_(programming_language)>`__ and "
"its many third party libraries as they relate to ``pandas``. In "
"comparisons with R and CRAN libraries, we care about the following "
"things:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:15
msgid "**Functionality / flexibility**: what can/cannot be done with each tool"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:16
msgid ""
"**Performance**: how fast are operations. Hard numbers/benchmarks are "
"preferable"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:18
msgid ""
"**Ease-of-use**: Is one tool easier/harder to use (you may have to be the"
" judge of this, given side-by-side code comparisons)"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:21
msgid ""
"This page is also here to offer a bit of a translation guide for users of"
" these R packages."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:24
msgid ""
"For transfer of ``DataFrame`` objects from ``pandas`` to R, one option is"
" to use HDF5 files, see :ref:`io.external_compatibility` for an example."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:30
msgid "Quick Reference"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:32
msgid ""
"We'll start off with a quick reference guide pairing some common R "
"operations using `dplyr "
"<http://cran.r-project.org/web/packages/dplyr/index.html>`__ with pandas "
"equivalents."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:39
msgid "Querying, Filtering, Sampling"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:42
#: ../../getting_started/comparison/comparison_with_r.rst:70
#: ../../getting_started/comparison/comparison_with_r.rst:80
#: ../../getting_started/comparison/comparison_with_r.rst:92
#: ../../getting_started/comparison/comparison_with_r.rst:302
msgid "R"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:42
#: ../../getting_started/comparison/comparison_with_r.rst:70
#: ../../getting_started/comparison/comparison_with_r.rst:80
#: ../../getting_started/comparison/comparison_with_r.rst:92
msgid "pandas"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:44
msgid "``dim(df)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:44
msgid "``df.shape``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:45
msgid "``head(df)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:45
msgid "``df.head()``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:46
msgid "``slice(df, 1:10)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:46
msgid "``df.iloc[:9]``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:47
msgid "``filter(df, col1 == 1, col2 == 1)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:47
msgid "``df.query('col1 == 1 & col2 == 1')``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:48
msgid "``df[df$col1 == 1 & df$col2 == 1,]``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:48
msgid "``df[(df.col1 == 1) & (df.col2 == 1)]``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:49
msgid "``select(df, col1, col2)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:49
msgid "``df[['col1', 'col2']]``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:50
msgid "``select(df, col1:col3)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:50
msgid "``df.loc[:, 'col1':'col3']``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:51
msgid "``select(df, -(col1:col3))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:51
msgid "``df.drop(cols_to_drop, axis=1)`` but see [#select_range]_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:52
msgid "``distinct(select(df, col1))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:52
msgid "``df[['col1']].drop_duplicates()``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:53
msgid "``distinct(select(df, col1, col2))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:53
msgid "``df[['col1', 'col2']].drop_duplicates()``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:54
msgid "``sample_n(df, 10)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:54
msgid "``df.sample(n=10)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:55
msgid "``sample_frac(df, 0.01)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:55
msgid "``df.sample(frac=0.01)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:58
msgid ""
"R's shorthand for a subrange of columns (``select(df, col1:col3)``) can "
"be approached cleanly in pandas, if you have the list of columns, for "
"example ``df[cols[1:3]]`` or ``df.drop(cols[1:3])``, but doing this by "
"column name is a bit messy."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:67
msgid "Sorting"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:72
msgid "``arrange(df, col1, col2)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:72
msgid "``df.sort_values(['col1', 'col2'])``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:73
msgid "``arrange(df, desc(col1))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:73
msgid "``df.sort_values('col1', ascending=False)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:77
msgid "Transforming"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:82
msgid "``select(df, col_one = col1)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:82
msgid "``df.rename(columns={'col1': 'col_one'})['col_one']``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:83
msgid "``rename(df, col_one = col1)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:83
msgid "``df.rename(columns={'col1': 'col_one'})``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:84
msgid "``mutate(df, c=a-b)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:84
msgid "``df.assign(c=df.a-df.b)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:89
msgid "Grouping and Summarizing"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:94
msgid "``summary(df)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:94
msgid "``df.describe()``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:95
msgid "``gdf <- group_by(df, col1)``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:95
msgid "``gdf = df.groupby('col1')``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:96
msgid "``summarise(gdf, avg=mean(col1, na.rm=TRUE))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:96
msgid "``df.groupby('col1').agg({'col1': 'mean'})``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:97
msgid "``summarise(gdf, total=sum(col1))``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:97
msgid "``df.groupby('col1').sum()``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:102
msgid "Base R"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:105
msgid "Slicing with R's |c|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:107
msgid "R makes it easy to access ``data.frame`` columns by name"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:114
msgid "or by integer location"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:121
msgid "Selecting multiple columns by name in ``pandas`` is straightforward"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:129
msgid ""
"Selecting multiple noncontiguous columns by integer location can be "
"achieved with a combination of the ``iloc`` indexer attribute and "
"``numpy.r_``."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:142
msgid "|aggregate|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:144
msgid ""
"In R you may want to split data into subsets and compute the mean for "
"each. Using a data.frame called ``df`` and splitting it into groups "
"``by1`` and ``by2``:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:157
msgid ""
"The :meth:`~pandas.DataFrame.groupby` method is similar to base R "
"``aggregate`` function."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:172
msgid ""
"For more details and examples see :ref:`the groupby documentation "
"<groupby.split>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:176
msgid "|match|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:178
#, python-format
msgid ""
"A common way to select data in R is using ``%in%`` which is defined using"
" the function ``match``. The operator ``%in%`` is used to return a "
"logical vector indicating if there is a match or not:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:187
#, python-format
msgid ""
"The :meth:`~pandas.DataFrame.isin` method is similar to R ``%in%`` "
"operator:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:194
msgid ""
"The ``match`` function returns a vector of the positions of matches of "
"its first argument in its second:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:202
msgid ""
"For more details and examples see :ref:`the reshaping documentation "
"<indexing.basics.indexing_isin>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:206
msgid "|tapply|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:208
msgid ""
"``tapply`` is similar to ``aggregate``, but data can be in a ragged "
"array, since the subclass sizes are possibly irregular. Using a "
"data.frame called ``baseball``, and retrieving information based on the "
"array ``team``:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:223
msgid ""
"In ``pandas`` we may use :meth:`~pandas.pivot_table` method to handle "
"this:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:237
msgid ""
"For more details and examples see :ref:`the reshaping documentation "
"<reshaping.pivot>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:241
msgid "|subset|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:243
msgid ""
"The :meth:`~pandas.DataFrame.query` method is similar to the base R "
"``subset`` function. In R you might want to get the rows of a "
"``data.frame`` where one column's values are less than another column's "
"values:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:253
msgid ""
"In ``pandas``, there are a few ways to perform subsetting. You can use "
":meth:`~pandas.DataFrame.query` or pass an expression as if it were an "
"index/slice as well as standard boolean indexing:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:264
msgid ""
"For more details and examples see :ref:`the query documentation "
"<indexing.query>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:269
msgid "|with|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:271
msgid ""
"An expression using a data.frame called ``df`` in R with the columns "
"``a`` and ``b`` would be evaluated using ``with`` like so:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:280
msgid ""
"In ``pandas`` the equivalent expression, using the "
":meth:`~pandas.DataFrame.eval` method, would be:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:289
msgid ""
"In certain cases :meth:`~pandas.DataFrame.eval` will be much faster than "
"evaluation in pure Python. For more details and examples see :ref:`the "
"eval documentation <enhancingperf.eval>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:294
msgid "plyr"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:296
msgid ""
"``plyr`` is an R library for the split-apply-combine strategy for data "
"analysis. The functions revolve around three data structures in R, ``a`` "
"for ``arrays``, ``l`` for ``lists``, and ``d`` for ``data.frame``. The "
"table below shows how these data structures could be mapped in Python."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:302
msgid "Python"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:304
msgid "array"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:304
msgid "list"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:306
msgid "lists"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:306
msgid "dictionary or list of objects"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:308
msgid "data.frame"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:308
msgid "dataframe"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:312
msgid "|ddply|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:314
msgid ""
"An expression using a data.frame called ``df`` in R where you want to "
"summarize ``x`` by ``month``:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:332
msgid ""
"In ``pandas`` the equivalent expression, using the "
":meth:`~pandas.DataFrame.groupby` method, would be:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:347
msgid ""
"For more details and examples see :ref:`the groupby documentation "
"<groupby.aggregate>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:351
msgid "reshape / reshape2"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:354
msgid "|meltarray|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:356
msgid ""
"An expression using a 3 dimensional array called ``a`` in R where you "
"want to melt it into a data.frame:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:364
msgid "In Python, since ``a`` is a list, you can simply use list comprehension."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:372
msgid "|meltlist|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:374
msgid ""
"An expression using a list called ``a`` in R where you want to melt it "
"into a data.frame:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:382
msgid ""
"In Python, this list would be a list of tuples, so "
":meth:`~pandas.DataFrame` method would convert it to a dataframe as "
"required."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:390
msgid ""
"For more details and examples see :ref:`the Into to Data Structures "
"documentation <dsintro>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:394
msgid "|meltdf|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:396
msgid ""
"An expression using a data.frame called ``cheese`` in R where you want to"
" reshape the data.frame:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:409
msgid "In Python, the :meth:`~pandas.melt` method is the R equivalent:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:421
msgid ""
"For more details and examples see :ref:`the reshaping documentation "
"<reshaping.melt>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:425
msgid "|cast|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:427
msgid ""
"In R ``acast`` is an expression using a data.frame called ``df`` in R to "
"cast into a higher dimensional array:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:443
msgid "In Python the best way is to make use of :meth:`~pandas.pivot_table`:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:457
msgid ""
"Similarly for ``dcast`` which uses a data.frame called ``df`` in R to "
"aggregate information based on ``Animal`` and ``FeedType``:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:473
msgid ""
"Python can approach this in two different ways. Firstly, similar to above"
" using :meth:`~pandas.pivot_table`:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:488
msgid ""
"The second approach is to use the :meth:`~pandas.DataFrame.groupby` "
"method:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:494
msgid ""
"For more details and examples see :ref:`the reshaping documentation "
"<reshaping.pivot>` or :ref:`the groupby documentation<groupby.split>`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:498
msgid "|factor|_"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:500
msgid "pandas has a data type for categorical data."
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:507
msgid ""
"In pandas this is accomplished with ``pd.cut`` and "
"``astype(\"category\")``:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_r.rst:514
msgid ""
"For more details and examples see :ref:`categorical introduction "
"<categorical>` and the :ref:`API documentation <api.arrays.categorical>`."
" There is also a documentation regarding the :ref:`differences to R's "
"factor <categorical.rfactor>`."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../getting_started/comparison/comparison_with_sql.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:6
msgid "Comparison with SQL"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:7
msgid ""
"Since many potential pandas users have some familiarity with `SQL "
"<https://en.wikipedia.org/wiki/SQL>`_, this page is meant to provide some"
" examples of how various SQL operations would be performed using pandas."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:11
msgid ""
"If you're new to pandas, you might want to first read through :ref:`10 "
"Minutes to pandas<10min>` to familiarize yourself with the library."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:14
msgid "As is customary, we import pandas and NumPy as follows:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:21
msgid ""
"Most of the examples will utilize the ``tips`` dataset found within "
"pandas tests.  We'll read the data into a DataFrame called `tips` and "
"assume we have a database table of the same name and structure."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:33
msgid "SELECT"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:34
msgid ""
"In SQL, selection is done using a comma-separated list of columns you'd "
"like to select (or a ``*`` to select all columns):"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:43
msgid ""
"With pandas, column selection is done by passing a list of column names "
"to your DataFrame:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:49
msgid ""
"Calling the DataFrame without the list of column names would display all "
"columns (akin to SQL's ``*``)."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:53
msgid "WHERE"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:54
msgid "Filtering in SQL is done via a WHERE clause."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:63
msgid ""
"DataFrames can be filtered in multiple ways; the most intuitive of which "
"is using `boolean indexing <https://pandas.pydata.org/pandas-"
"docs/stable/indexing.html#boolean-indexing>`_."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:70
msgid ""
"The above statement is simply passing a ``Series`` of True/False objects "
"to the DataFrame, returning all rows with True."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:79
msgid ""
"Just like SQL's OR and AND, multiple conditions can be passed to a "
"DataFrame using | (OR) and & (AND)."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:106
msgid ""
"NULL checking is done using the :meth:`~pandas.Series.notna` and "
":meth:`~pandas.Series.isna` methods."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:115
msgid ""
"Assume we have a table of the same structure as our DataFrame above. We "
"can see only the records where ``col2`` IS NULL with the following query:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:128
msgid ""
"Getting items where ``col1`` IS NOT NULL can be done with "
":meth:`~pandas.Series.notna`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:142
msgid "GROUP BY"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:143
msgid ""
"In pandas, SQL's GROUP BY operations are performed using the similarly "
"named :meth:`~pandas.DataFrame.groupby` method. "
":meth:`~pandas.DataFrame.groupby` typically refers to a process where "
"we'd like to split a dataset into groups, apply some function (typically "
"aggregation) , and then combine the groups together."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:148
msgid ""
"A common SQL operation would be getting the count of records in each "
"group throughout a dataset. For instance, a query getting us the number "
"of tips left by sex:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:162
msgid "The pandas equivalent would be:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:168
msgid ""
"Notice that in the pandas code we used "
":meth:`~pandas.core.groupby.DataFrameGroupBy.size` and not "
":meth:`~pandas.core.groupby.DataFrameGroupBy.count`. This is because "
":meth:`~pandas.core.groupby.DataFrameGroupBy.count` applies the function "
"to each column, returning the number of ``not null`` records within each."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:177
msgid ""
"Alternatively, we could have applied the "
":meth:`~pandas.core.groupby.DataFrameGroupBy.count` method to an "
"individual column:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:184
msgid ""
"Multiple functions can also be applied at once. For instance, say we'd "
"like to see how tip amount differs by day of the week - "
":meth:`~pandas.core.groupby.DataFrameGroupBy.agg` allows you to pass a "
"dictionary to your grouped DataFrame, indicating which functions to apply"
" to specific columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:204
msgid ""
"Grouping by more than one column is done by passing a list of columns to "
"the :meth:`~pandas.DataFrame.groupby` method."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:231
msgid "JOIN"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:232
msgid ""
"JOINs can be performed with :meth:`~pandas.DataFrame.join` or "
":meth:`~pandas.merge`. By default, :meth:`~pandas.DataFrame.join` will "
"join the DataFrames on their indices. Each method has parameters allowing"
" you to specify the type of join to perform (LEFT, RIGHT, INNER, FULL) or"
" the columns to join on (column names or indices)."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:244
msgid ""
"Assume we have two database tables of the same name and structure as our "
"DataFrames."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:246
msgid "Now let's go over the various types of JOINs."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:249
msgid "INNER JOIN"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:262
msgid ""
":meth:`~pandas.merge` also offers parameters for cases when you'd like to"
" join one DataFrame's column with another DataFrame's index."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:271
msgid "LEFT OUTER JOIN"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:286
msgid "RIGHT JOIN"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:301
msgid "FULL JOIN"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:302
msgid ""
"pandas also allows for FULL JOINs, which display both sides of the "
"dataset, whether or not the joined columns find a match. As of writing, "
"FULL JOINs are not supported in all RDBMS (MySQL)."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:320
msgid "UNION"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:321
msgid "UNION ALL can be performed using :meth:`~pandas.concat`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:351
msgid ""
"SQL's UNION is similar to UNION ALL, however UNION will remove duplicate "
"rows."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:370
msgid ""
"In pandas, you can use :meth:`~pandas.concat` in conjunction with "
":meth:`~pandas.DataFrame.drop_duplicates`."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:378
msgid "Pandas equivalents for some SQL analytic and aggregate functions"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:381
msgid "Top N rows with offset"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:395
msgid "Top N rows per group"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:418
msgid "the same using `rank(method='first')` function"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:440
msgid ""
"Let's find tips with (rank < 3) per gender group for (tips < 2). Notice "
"that when using ``rank(method='min')`` function `rnk_min` remains the "
"same for the same `tip` (as Oracle's RANK() function)"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:455
msgid "UPDATE"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:468
msgid "DELETE"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sql.rst:475
msgid "In pandas we select the rows that should remain, instead of deleting them"
msgstr ""


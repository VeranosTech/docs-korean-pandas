# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../getting_started/comparison/comparison_with_sas.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:6
msgid "Comparison with SAS"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:7
msgid ""
"For potential users coming from `SAS "
"<https://en.wikipedia.org/wiki/SAS_(software)>`__ this page is meant to "
"demonstrate how different SAS operations would be performed in pandas."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:11
msgid ""
"If you're new to pandas, you might want to first read through :ref:`10 "
"Minutes to pandas<10min>` to familiarize yourself with the library."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:14
msgid "As is customary, we import pandas and NumPy as follows:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:24
msgid ""
"Throughout this tutorial, the pandas ``DataFrame`` will be displayed by "
"calling ``df.head()``, which displays the first N (default 5) rows of the"
" ``DataFrame``. This is often used in interactive work (e.g. `Jupyter "
"notebook <https://jupyter.org/>`_ or terminal) - the equivalent in SAS "
"would be:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:35
msgid "Data Structures"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:38
msgid "General Terminology Translation"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "pandas"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "SAS"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "``DataFrame``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "data set"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "column"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "variable"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "row"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "observation"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "groupby"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "BY-group"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "``NaN``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:1
msgid "``.``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:52
msgid "``DataFrame`` / ``Series``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:54
msgid ""
"A ``DataFrame`` in pandas is analogous to a SAS data set - a two-"
"dimensional data source with labeled columns that can be of different "
"types. As will be shown in this document, almost any operation that can "
"be applied to a data set using SAS's ``DATA`` step, can also be "
"accomplished in pandas."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:59
msgid ""
"A ``Series`` is the data structure that represents one column of a "
"``DataFrame``. SAS doesn't have a separate data structure for a single "
"column, but in general, working with a ``Series`` is analogous to "
"referencing a column in the ``DATA`` step."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:65
msgid "``Index``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:67
msgid ""
"Every ``DataFrame`` and ``Series`` has an ``Index`` - which are labels on"
" the *rows* of the data. SAS does not have an exactly analogous concept. "
"A data set's rows are essentially unlabeled, other than an implicit "
"integer index that can be accessed during the ``DATA`` step (``_N_``)."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:72
msgid ""
"In pandas, if no index is specified, an integer index is also used by "
"default (first row = 0, second row = 1, and so on). While using a labeled"
" ``Index`` or ``MultiIndex`` can enable sophisticated analyses and is "
"ultimately an important part of pandas to understand, for this comparison"
" we will essentially ignore the ``Index`` and just treat the "
"``DataFrame`` as a collection of columns. Please see the :ref:`indexing "
"documentation<indexing>` for much more on how to use an ``Index`` "
"effectively."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:82
msgid "Data Input / Output"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:85
msgid "Constructing a DataFrame from Values"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:87
msgid ""
"A SAS data set can be built from specified values by placing the data "
"after a ``datalines`` statement and specifying the column names."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:102
msgid ""
"A pandas ``DataFrame`` can be constructed in many different ways, but for"
" a small number of values, it is often convenient to specify it as a "
"Python dictionary, where the keys are the column names and the values are"
" the data."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:114
msgid "Reading External Data"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:116
msgid ""
"Like SAS, pandas provides utilities for reading in data from many "
"formats.  The ``tips`` dataset, found within the pandas tests (`csv "
"<https://raw.github.com/pandas-"
"dev/pandas/master/pandas/tests/data/tips.csv>`_) will be used in many of "
"the following examples."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:121
msgid "SAS provides ``PROC IMPORT`` to read csv data into a data set."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:129
msgid "The pandas method is :func:`read_csv`, which works similarly."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:139
msgid ""
"Like ``PROC IMPORT``, ``read_csv`` can take a number of parameters to "
"specify how the data should be parsed.  For example, if the data was "
"instead tab delimited, and did not have column names, the pandas command "
"would be:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:150
msgid ""
"In addition to text/csv, pandas supports a variety of other data formats "
"such as Excel, HDF5, and SQL databases.  These are all read via a "
"``pd.read_*`` function.  See the :ref:`IO documentation<io>` for more "
"details."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:155
msgid "Exporting Data"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:157
msgid "The inverse of ``PROC IMPORT`` in SAS is ``PROC EXPORT``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:164
msgid ""
"Similarly in pandas, the opposite of ``read_csv`` is "
":meth:`~DataFrame.to_csv`, and other data formats follow a similar api."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:173
msgid "Data Operations"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:176
msgid "Operations on Columns"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:178
msgid ""
"In the ``DATA`` step, arbitrary math expressions can be used on new or "
"existing columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:189
msgid ""
"pandas provides similar vectorized operations by specifying the "
"individual ``Series`` in the ``DataFrame``. New columns can be assigned "
"in the same way."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:205
msgid "Filtering"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:207
msgid ""
"Filtering in SAS is done with an ``if`` or ``where`` statement, on one or"
" more columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:224
msgid ""
"DataFrames can be filtered in multiple ways; the most intuitive of which "
"is using :ref:`boolean indexing <indexing.boolean>`"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:232
msgid "If/Then Logic"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:234
msgid "In SAS, if/then logic can be used to create new columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:246
msgid ""
"The same operation in pandas can be accomplished using the ``where`` "
"method from ``numpy``."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:260
msgid "Date Functionality"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:262
msgid ""
"SAS provides a variety of functions to do operations on date/datetime "
"columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:280
msgid ""
"The equivalent pandas operations are shown below.  In addition to these "
"functions pandas supports other Time Series features not available in "
"Base SAS (such as resampling and custom offsets) - see the "
":ref:`timeseries documentation<timeseries>` for more details."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:305
msgid "Selection of Columns"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:307
msgid ""
"SAS provides keywords in the ``DATA`` step to select, drop, and rename "
"columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:327
msgid "The same operations are expressed in pandas below."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:342
msgid "Sorting by Values"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:344
msgid "Sorting in SAS is accomplished via ``PROC SORT``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:352
msgid ""
"pandas objects have a :meth:`~DataFrame.sort_values` method, which takes "
"a list of columns to sort by."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:362
msgid "String Processing"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:365
msgid "Length"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:367
msgid ""
"SAS determines the length of a character string with the `LENGTHN "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002284668.htm>`__"
" and `LENGTHC "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002283942.htm>`__"
" functions. ``LENGTHN`` excludes trailing blanks and ``LENGTHC`` includes"
" trailing blanks."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:380
msgid ""
"Python determines the length of a character string with the ``len`` "
"function. ``len`` includes trailing blanks.  Use ``len`` and ``rstrip`` "
"to exclude trailing blanks."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:391
msgid "Find"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:393
msgid ""
"SAS determines the position of a character in a string with the `FINDW "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002978282.htm>`__"
" function. ``FINDW`` takes the string defined by the first argument and "
"searches for the first position of the substring you supply as the second"
" argument."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:405
msgid ""
"Python determines the position of a character in a string with the "
"``find`` function.  ``find`` searches for the first position of the "
"substring.  If the substring is found, the function returns its position."
"  Keep in mind that Python indexes are zero-based and the function will "
"return -1 if it fails to find the substring."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:417
msgid "Substring"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:419
msgid ""
"SAS extracts a substring from a string based on its position with the "
"`SUBSTR <https://www2.sas.com/proceedings/sugi25/25/cc/25p088.pdf>`__ "
"function."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:429
msgid ""
"With pandas you can use ``[]`` notation to extract a substring from a "
"string by position locations.  Keep in mind that Python indexes are zero-"
"based."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:439
msgid "Scan"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:441
msgid ""
"The SAS `SCAN "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000214639.htm>`__"
" function returns the nth word from a string. The first argument is the "
"string you want to parse and the second argument specifies which word you"
" want to extract."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:457
msgid ""
"Python extracts a substring from a string based on its text by using "
"regular expressions. There are much more powerful approaches, but this "
"just shows a simple approach."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:470
msgid "Upcase, Lowcase, and Propcase"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:472
msgid ""
"The SAS `UPCASE "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245965.htm>`__"
" `LOWCASE "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245912.htm>`__"
" and `PROPCASE "
"<https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/a002598106.htm>`__"
" functions change the case of the argument."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:490
msgid "The equivalent Python functions are ``upper``, ``lower``, and ``title``."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:501
msgid "Merging"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:503
msgid "The following tables will be used in the merge examples"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:514
msgid ""
"In SAS, data must be explicitly sorted before merging.  Different types "
"of joins are accomplished using the ``in=`` dummy variables to track "
"whether a match was found in one or both input frames."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:538
msgid ""
"pandas DataFrames have a :meth:`~DataFrame.merge` method, which provides "
"similar functionality.  Note that the data does not have to be sorted "
"ahead of time, and different join types are accomplished via the ``how`` "
"keyword."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:559
msgid "Missing Data"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:561
msgid ""
"Like SAS, pandas has a representation for missing data - which is the "
"special float value ``NaN`` (not a number).  Many of the semantics are "
"the same, for example missing data propagates through numeric operations,"
" and is ignored by default for aggregations."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:572
msgid ""
"One difference is that missing data cannot be compared to its sentinel "
"value. For example, in SAS you could do this to filter missing values."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:587
msgid ""
"Which doesn't work in pandas.  Instead, the ``pd.isna`` or ``pd.notna`` "
"functions should be used for comparisons."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:595
msgid ""
"pandas also provides a variety of methods to work with missing data - "
"some of which would be challenging to express in SAS. For example, there "
"are methods to drop all rows with any missing values, replacing missing "
"values with a specified value, like the mean, or forward filling from "
"previous rows. See the :ref:`missing data documentation<missing_data>` "
"for more."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:609
msgid "GroupBy"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:612
msgid "Aggregation"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:614
msgid ""
"SAS's PROC SUMMARY can be used to group by one or more key variables and "
"compute aggregations on numeric columns."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:626
msgid ""
"pandas provides a flexible ``groupby`` mechanism that allows similar "
"aggregations.  See the :ref:`groupby documentation<groupby>` for more "
"details and examples."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:637
msgid "Transformation"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:639
msgid ""
"In SAS, if the group aggregations need to be used with the original "
"frame, it must be merged back together.  For example, to subtract the "
"mean for each observation by smoker group."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:663
msgid ""
"pandas ``groubpy`` provides a ``transform`` mechanism that allows these "
"type of operations to be succinctly expressed in one operation."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:675
msgid "By Group Processing"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:677
msgid ""
"In addition to aggregation, pandas ``groupby`` can be used to replicate "
"most other by group processing from SAS. For example, this ``DATA`` step "
"reads the data by sex/smoker group and filters to the first entry for "
"each."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:694
msgid "In pandas this would be written as:"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:702
msgid "Other Considerations"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:705
msgid "Disk vs Memory"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:707
msgid ""
"pandas operates exclusively in memory, where a SAS data set exists on "
"disk. This means that the size of data able to be loaded in pandas is "
"limited by your machine's memory, but also that the operations on that "
"data may be faster."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:711
msgid ""
"If out of core processing is needed, one possibility is the "
"`dask.dataframe <https://dask.pydata.org/en/latest/dataframe.html>`_ "
"library (currently in development) which provides a subset of pandas "
"functionality for an on-disk ``DataFrame``"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:717
msgid "Data Interop"
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:719
msgid ""
"pandas provides a :func:`read_sas` method that can read SAS data saved in"
" the XPORT or SAS7BDAT binary format."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:735
msgid ""
"You can also specify the file format directly. By default, pandas will "
"try to infer the file format based on its extension."
msgstr ""

#: ../../getting_started/comparison/comparison_with_sas.rst:743
msgid ""
"XPORT is a relatively limited format and the parsing of it is not as "
"optimized as some of the other pandas readers. An alternative way to "
"interop data between SAS and pandas is to serialize to csv."
msgstr ""


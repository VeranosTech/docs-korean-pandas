# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2014, the pandas development team
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 0.24.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 11:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../getting_started/overview.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../getting_started/overview.rst:7
msgid "Package overview"
msgstr ""

#: ../../getting_started/overview.rst:9
msgid ""
"**pandas** is a `Python <https://www.python.org>`__ package providing "
"fast, flexible, and expressive data structures designed to make working "
"with \"relational\" or \"labeled\" data both easy and intuitive. It aims "
"to be the fundamental high-level building block for doing practical, "
"**real world** data analysis in Python. Additionally, it has the broader "
"goal of becoming **the most powerful and flexible open source data "
"analysis / manipulation tool available in any language**. It is already "
"well on its way toward this goal."
msgstr ""

#: ../../getting_started/overview.rst:17
msgid "pandas is well suited for many different kinds of data:"
msgstr ""

#: ../../getting_started/overview.rst:19
msgid ""
"Tabular data with heterogeneously-typed columns, as in an SQL table or "
"Excel spreadsheet"
msgstr ""

#: ../../getting_started/overview.rst:21
msgid "Ordered and unordered (not necessarily fixed-frequency) time series data."
msgstr ""

#: ../../getting_started/overview.rst:22
msgid ""
"Arbitrary matrix data (homogeneously typed or heterogeneous) with row and"
" column labels"
msgstr ""

#: ../../getting_started/overview.rst:24
msgid ""
"Any other form of observational / statistical data sets. The data "
"actually need not be labeled at all to be placed into a pandas data "
"structure"
msgstr ""

#: ../../getting_started/overview.rst:27
msgid ""
"The two primary data structures of pandas, :class:`Series` "
"(1-dimensional) and :class:`DataFrame` (2-dimensional), handle the vast "
"majority of typical use cases in finance, statistics, social science, and"
" many areas of engineering. For R users, :class:`DataFrame` provides "
"everything that R's ``data.frame`` provides and much more. pandas is "
"built on top of `NumPy <https://www.numpy.org>`__ and is intended to "
"integrate well within a scientific computing environment with many other "
"3rd party libraries."
msgstr ""

#: ../../getting_started/overview.rst:35
msgid "Here are just a few of the things that pandas does well:"
msgstr ""

#: ../../getting_started/overview.rst:37
msgid ""
"Easy handling of **missing data** (represented as NaN) in floating point "
"as well as non-floating point data"
msgstr ""

#: ../../getting_started/overview.rst:39
msgid ""
"Size mutability: columns can be **inserted and deleted** from DataFrame "
"and higher dimensional objects"
msgstr ""

#: ../../getting_started/overview.rst:41
msgid ""
"Automatic and explicit **data alignment**: objects can be explicitly "
"aligned to a set of labels, or the user can simply ignore the labels and "
"let `Series`, `DataFrame`, etc. automatically align the data for you in "
"computations"
msgstr ""

#: ../../getting_started/overview.rst:45
msgid ""
"Powerful, flexible **group by** functionality to perform split-apply-"
"combine operations on data sets, for both aggregating and transforming "
"data"
msgstr ""

#: ../../getting_started/overview.rst:48
msgid ""
"Make it **easy to convert** ragged, differently-indexed data in other "
"Python and NumPy data structures into DataFrame objects"
msgstr ""

#: ../../getting_started/overview.rst:50
msgid ""
"Intelligent label-based **slicing**, **fancy indexing**, and "
"**subsetting** of large data sets"
msgstr ""

#: ../../getting_started/overview.rst:52
msgid "Intuitive **merging** and **joining** data sets"
msgstr ""

#: ../../getting_started/overview.rst:53
msgid "Flexible **reshaping** and pivoting of data sets"
msgstr ""

#: ../../getting_started/overview.rst:54
msgid ""
"**Hierarchical** labeling of axes (possible to have multiple labels per "
"tick)"
msgstr ""

#: ../../getting_started/overview.rst:56
msgid ""
"Robust IO tools for loading data from **flat files** (CSV and delimited),"
" Excel files, databases, and saving / loading data from the ultrafast "
"**HDF5 format**"
msgstr ""

#: ../../getting_started/overview.rst:59
msgid ""
"**Time series**-specific functionality: date range generation and "
"frequency conversion, moving window statistics, moving window linear "
"regressions, date shifting and lagging, etc."
msgstr ""

#: ../../getting_started/overview.rst:63
msgid ""
"Many of these principles are here to address the shortcomings frequently "
"experienced using other languages / scientific research environments. For"
" data scientists, working with data is typically divided into multiple "
"stages: munging and cleaning data, analyzing / modeling it, then "
"organizing the results of the analysis into a form suitable for plotting "
"or tabular display. pandas is the ideal tool for all of these tasks."
msgstr ""

#: ../../getting_started/overview.rst:70
msgid "Some other notes"
msgstr ""

#: ../../getting_started/overview.rst:72
msgid ""
"pandas is **fast**. Many of the low-level algorithmic bits have been "
"extensively tweaked in `Cython <https://cython.org>`__ code. However, as "
"with anything else generalization usually sacrifices performance. So if "
"you focus on one feature for your application you may be able to create a"
" faster specialized tool."
msgstr ""

#: ../../getting_started/overview.rst:78
msgid ""
"pandas is a dependency of `statsmodels "
"<https://www.statsmodels.org/stable/index.html>`__, making it an "
"important part of the statistical computing ecosystem in Python."
msgstr ""

#: ../../getting_started/overview.rst:82
msgid "pandas has been used extensively in production in financial applications."
msgstr ""

#: ../../getting_started/overview.rst:85
msgid "Data Structures"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "Dimensions"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "Name"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "Description"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "1"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "Series"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "1D labeled homogeneously-typed array"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "2"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid "DataFrame"
msgstr ""

#: ../../getting_started/overview.rst:1
msgid ""
"General 2D labeled, size-mutable tabular structure with potentially "
"heterogeneously-typed column"
msgstr ""

#: ../../getting_started/overview.rst:95
msgid "Why more than one data structure?"
msgstr ""

#: ../../getting_started/overview.rst:97
msgid ""
"The best way to think about the pandas data structures is as flexible "
"containers for lower dimensional data. For example, DataFrame is a "
"container for Series, and Series is a container for scalars. We would "
"like to be able to insert and remove objects from these containers in a "
"dictionary-like fashion."
msgstr ""

#: ../../getting_started/overview.rst:103
msgid ""
"Also, we would like sensible default behaviors for the common API "
"functions which take into account the typical orientation of time series "
"and cross-sectional data sets. When using ndarrays to store 2- and "
"3-dimensional data, a burden is placed on the user to consider the "
"orientation of the data set when writing functions; axes are considered "
"more or less equivalent (except when C- or Fortran-contiguousness matters"
" for performance). In pandas, the axes are intended to lend more semantic"
" meaning to the data; i.e., for a particular data set there is likely to "
"be a \"right\" way to orient the data. The goal, then, is to reduce the "
"amount of mental effort required to code up data transformations in "
"downstream functions."
msgstr ""

#: ../../getting_started/overview.rst:114
msgid ""
"For example, with tabular data (DataFrame) it is more semantically "
"helpful to think of the **index** (the rows) and the **columns** rather "
"than axis 0 and axis 1. Iterating through the columns of the DataFrame "
"thus results in more readable code:"
msgstr ""

#: ../../getting_started/overview.rst:126
msgid "Mutability and copying of data"
msgstr ""

#: ../../getting_started/overview.rst:128
msgid ""
"All pandas data structures are value-mutable (the values they contain can"
" be altered) but not always size-mutable. The length of a Series cannot "
"be changed, but, for example, columns can be inserted into a DataFrame. "
"However, the vast majority of methods produce new objects and leave the "
"input data untouched. In general we like to **favor immutability** where "
"sensible."
msgstr ""

#: ../../getting_started/overview.rst:135
msgid "Getting Support"
msgstr ""

#: ../../getting_started/overview.rst:137
msgid ""
"The first stop for pandas issues and ideas is the `Github Issue Tracker "
"<https://github.com/pandas-dev/pandas/issues>`__. If you have a general "
"question, pandas community experts can answer through `Stack Overflow "
"<https://stackoverflow.com/questions/tagged/pandas>`__."
msgstr ""

#: ../../getting_started/overview.rst:143
msgid "Community"
msgstr ""

#: ../../getting_started/overview.rst:145
msgid ""
"pandas is actively supported today by a community of like-minded "
"individuals around the world who contribute their valuable time and "
"energy to help make open source pandas possible. Thanks to `all of our "
"contributors <https://github.com/pandas-"
"dev/pandas/graphs/contributors>`__."
msgstr ""

#: ../../getting_started/overview.rst:149
msgid ""
"If you're interested in contributing, please visit the :ref:`contributing"
" guide <contributing>`."
msgstr ""

#: ../../getting_started/overview.rst:151
msgid ""
"pandas is a `NumFOCUS <https://www.numfocus.org/open-source-projects/>`__"
" sponsored project. This will help ensure the success of development of "
"pandas as a world-class open-source project, and makes it possible to "
"`donate <https://pandas.pydata.org/donate.html>`__ to the project."
msgstr ""

#: ../../getting_started/overview.rst:156
msgid "Project Governance"
msgstr ""

#: ../../getting_started/overview.rst:158
msgid ""
"The governance process that pandas project has used informally since its "
"inception in 2008 is formalized in `Project Governance documents "
"<https://github.com/pandas-dev/pandas-governance>`__. The documents "
"clarify how decisions are made and how the various elements of our "
"community interact, including the relationship between open source "
"collaborative development and work that may be funded by for-profit or "
"non-profit entities."
msgstr ""

#: ../../getting_started/overview.rst:161
msgid "Wes McKinney is the Benevolent Dictator for Life (BDFL)."
msgstr ""

#: ../../getting_started/overview.rst:164
msgid "Development Team"
msgstr ""

#: ../../getting_started/overview.rst:166
msgid ""
"The list of the Core Team members and more detailed information can be "
"found on the `people’s page <https://github.com/pandas-dev/pandas-"
"governance/blob/master/people.md>`__ of the governance repo."
msgstr ""

#: ../../getting_started/overview.rst:170
msgid "Institutional Partners"
msgstr ""

#: ../../getting_started/overview.rst:172
msgid ""
"The information about current institutional partners can be found on "
"`pandas website page <https://pandas.pydata.org/about.html>`__."
msgstr ""

#: ../../getting_started/overview.rst:175
msgid "License"
msgstr ""

